// Code generated by "enumer -type=Action -text action.go"; DO NOT EDIT.

package main

import (
	"fmt"
)

const _ActionName = "AddMergeReplace"

var _ActionIndex = [...]uint8{0, 3, 8, 15}

const _ActionLowerName = "addmergereplace"

func (i Action) String() string {
	if i < 0 || i >= Action(len(_ActionIndex)-1) {
		return fmt.Sprintf("Action(%d)", i)
	}
	return _ActionName[_ActionIndex[i]:_ActionIndex[i+1]]
}

var _ActionValues = []Action{0, 1, 2}

var _ActionNameToValueMap = map[string]Action{
	_ActionName[0:3]:       0,
	_ActionLowerName[0:3]:  0,
	_ActionName[3:8]:       1,
	_ActionLowerName[3:8]:  1,
	_ActionName[8:15]:      2,
	_ActionLowerName[8:15]: 2,
}

var _ActionNames = []string{
	_ActionName[0:3],
	_ActionName[3:8],
	_ActionName[8:15],
}

// ActionString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ActionString(s string) (Action, error) {
	if val, ok := _ActionNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Action values", s)
}

// ActionValues returns all values of the enum
func ActionValues() []Action {
	return _ActionValues
}

// ActionStrings returns a slice of all String values of the enum
func ActionStrings() []string {
	strs := make([]string, len(_ActionNames))
	copy(strs, _ActionNames)
	return strs
}

// IsAAction returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Action) IsAAction() bool {
	for _, v := range _ActionValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalText implements the encoding.TextMarshaler interface for Action
func (i Action) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for Action
func (i *Action) UnmarshalText(text []byte) error {
	var err error
	*i, err = ActionString(string(text))
	return err
}
