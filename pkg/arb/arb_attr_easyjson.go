// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package arb

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson5edff16dDecodeGithubComEmpirefoxProtocGenDartExtPkgArb(in *jlexer.Lexer, out *ArbPlaceholder) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "x-lang-info":
			(out.LangInfos).UnmarshalEasyJSON(in)
		case "description":
			out.Description = string(in.String())
		case "example":
			if m, ok := out.Example.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Example.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Example = in.Interface()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5edff16dEncodeGithubComEmpirefoxProtocGenDartExtPkgArb(out *jwriter.Writer, in ArbPlaceholder) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.LangInfos) != 0 {
		const prefix string = ",\"x-lang-info\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.LangInfos).MarshalEasyJSON(out)
	}
	if in.Description != "" {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	if in.Example != nil {
		const prefix string = ",\"example\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.Example.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Example.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Example))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ArbPlaceholder) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5edff16dEncodeGithubComEmpirefoxProtocGenDartExtPkgArb(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ArbPlaceholder) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5edff16dEncodeGithubComEmpirefoxProtocGenDartExtPkgArb(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ArbPlaceholder) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5edff16dDecodeGithubComEmpirefoxProtocGenDartExtPkgArb(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ArbPlaceholder) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5edff16dDecodeGithubComEmpirefoxProtocGenDartExtPkgArb(l, v)
}
func easyjson5edff16dDecodeGithubComEmpirefoxProtocGenDartExtPkgArb1(in *jlexer.Lexer, out *ArbLangInfos) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(ArbLangInfos, 0, 8)
			} else {
				*out = ArbLangInfos{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v1 *ArbLangInfo
			if in.IsNull() {
				in.Skip()
				v1 = nil
			} else {
				if v1 == nil {
					v1 = new(ArbLangInfo)
				}
				(*v1).UnmarshalEasyJSON(in)
			}
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5edff16dEncodeGithubComEmpirefoxProtocGenDartExtPkgArb1(out *jwriter.Writer, in ArbLangInfos) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			if v3 == nil {
				out.RawString("null")
			} else {
				(*v3).MarshalEasyJSON(out)
			}
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v ArbLangInfos) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5edff16dEncodeGithubComEmpirefoxProtocGenDartExtPkgArb1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ArbLangInfos) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5edff16dEncodeGithubComEmpirefoxProtocGenDartExtPkgArb1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ArbLangInfos) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5edff16dDecodeGithubComEmpirefoxProtocGenDartExtPkgArb1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ArbLangInfos) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5edff16dDecodeGithubComEmpirefoxProtocGenDartExtPkgArb1(l, v)
}
func easyjson5edff16dDecodeGithubComEmpirefoxProtocGenDartExtPkgArb2(in *jlexer.Lexer, out *ArbLangInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "lang":
			out.Lang = string(in.String())
		case "info":
			out.Info = string(in.String())
		case "import":
			out.Import = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5edff16dEncodeGithubComEmpirefoxProtocGenDartExtPkgArb2(out *jwriter.Writer, in ArbLangInfo) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Lang != "" {
		const prefix string = ",\"lang\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Lang))
	}
	if in.Info != "" {
		const prefix string = ",\"info\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Info))
	}
	if in.Import != "" {
		const prefix string = ",\"import\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Import))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ArbLangInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5edff16dEncodeGithubComEmpirefoxProtocGenDartExtPkgArb2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ArbLangInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5edff16dEncodeGithubComEmpirefoxProtocGenDartExtPkgArb2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ArbLangInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5edff16dDecodeGithubComEmpirefoxProtocGenDartExtPkgArb2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ArbLangInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5edff16dDecodeGithubComEmpirefoxProtocGenDartExtPkgArb2(l, v)
}
func easyjson5edff16dDecodeGithubComEmpirefoxProtocGenDartExtPkgArb3(in *jlexer.Lexer, out *ArbAttributes) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "context":
			out.Context = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "placeholders":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Placeholders).UnmarshalJSON(data))
			}
		case "x-maybe_same_with":
			out.MaybeSameWith = string(in.String())
		case "x-export":
			out.Export = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5edff16dEncodeGithubComEmpirefoxProtocGenDartExtPkgArb3(out *jwriter.Writer, in ArbAttributes) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Type != "" {
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	if in.Context != "" {
		const prefix string = ",\"context\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Context))
	}
	if in.Description != "" {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	if len(in.Placeholders) != 0 {
		const prefix string = ",\"placeholders\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Placeholders).MarshalJSON())
	}
	if in.MaybeSameWith != "" {
		const prefix string = ",\"x-maybe_same_with\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MaybeSameWith))
	}
	if in.Export != "" {
		const prefix string = ",\"x-export\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Export))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ArbAttributes) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5edff16dEncodeGithubComEmpirefoxProtocGenDartExtPkgArb3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ArbAttributes) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5edff16dEncodeGithubComEmpirefoxProtocGenDartExtPkgArb3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ArbAttributes) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5edff16dDecodeGithubComEmpirefoxProtocGenDartExtPkgArb3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ArbAttributes) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5edff16dDecodeGithubComEmpirefoxProtocGenDartExtPkgArb3(l, v)
}
