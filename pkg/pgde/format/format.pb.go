// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pgde/format/format.proto

package format

import (
	fmt "fmt"
	units "github.com/empirefox/protoc-gen-dart-ext/pkg/pgde/units"
	proto "github.com/golang/protobuf/proto"
	descriptor "github.com/golang/protobuf/protoc-gen-go/descriptor"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Support field: `Datetime`, `Duration`, `[s,fixed]int64`(will mark it as
// time) or other `int` types. `int` values must be from utc.
//
// - `*Datetime[24H]` must set on `Datetime` or `int64` type.
// - `ofDay[24H]` must set on `Datetime` or `uint` types.
// - `duration` must set on `Duration` or any `int` types.
type TimeFormat_Builtin int32

const (
	// Formats the date using a medium-width format.
	//  Examples:
	// - US English: Wed, Sep 27
	// - Russian: ср, сент. 27
	TimeFormat_mediumDate TimeFormat_Builtin = 0
	// Formats day of week, month, day of month and year in a long-width format.
	// Examples:
	// - US English: Wednesday, September 27, 2017
	// - Russian: Среда, Сентябрь 27, 2017
	TimeFormat_fullData TimeFormat_Builtin = 1
	// 3:00pm or 15:00pm
	// default parse the int value as minute
	TimeFormat_ofDay TimeFormat_Builtin = 2
	// 15:00pm
	TimeFormat_ofDay24H          TimeFormat_Builtin = 3
	TimeFormat_mediumDatetime    TimeFormat_Builtin = 4
	TimeFormat_mediumDatetime24H TimeFormat_Builtin = 5
	TimeFormat_fullDatetime      TimeFormat_Builtin = 6
	TimeFormat_fullDatetime24H   TimeFormat_Builtin = 7
	TimeFormat_duration          TimeFormat_Builtin = 8
)

var TimeFormat_Builtin_name = map[int32]string{
	0: "mediumDate",
	1: "fullData",
	2: "ofDay",
	3: "ofDay24H",
	4: "mediumDatetime",
	5: "mediumDatetime24H",
	6: "fullDatetime",
	7: "fullDatetime24H",
	8: "duration",
}

var TimeFormat_Builtin_value = map[string]int32{
	"mediumDate":        0,
	"fullData":          1,
	"ofDay":             2,
	"ofDay24H":          3,
	"mediumDatetime":    4,
	"mediumDatetime24H": 5,
	"fullDatetime":      6,
	"fullDatetime24H":   7,
	"duration":          8,
}

func (x TimeFormat_Builtin) String() string {
	return proto.EnumName(TimeFormat_Builtin_name, int32(x))
}

func (TimeFormat_Builtin) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f2375ce5ebe45416, []int{1, 0}
}

type TimeFormat_IntUnit int32

const (
	// invalid if field is of an int type
	TimeFormat_und TimeFormat_IntUnit = 0
	// Dart lost the nano part, eg. 1,100 becomes 1,000.
	TimeFormat_nanosecond  TimeFormat_IntUnit = 1
	TimeFormat_microsecond TimeFormat_IntUnit = 2
	TimeFormat_millisecond TimeFormat_IntUnit = 3
	TimeFormat_second      TimeFormat_IntUnit = 4
	TimeFormat_minute      TimeFormat_IntUnit = 5
	TimeFormat_hour        TimeFormat_IntUnit = 6
	// not on ofDay
	TimeFormat_day TimeFormat_IntUnit = 7
	// not on ofDay
	TimeFormat_week TimeFormat_IntUnit = 8
)

var TimeFormat_IntUnit_name = map[int32]string{
	0: "und",
	1: "nanosecond",
	2: "microsecond",
	3: "millisecond",
	4: "second",
	5: "minute",
	6: "hour",
	7: "day",
	8: "week",
}

var TimeFormat_IntUnit_value = map[string]int32{
	"und":         0,
	"nanosecond":  1,
	"microsecond": 2,
	"millisecond": 3,
	"second":      4,
	"minute":      5,
	"hour":        6,
	"day":         7,
	"week":        8,
}

func (x TimeFormat_IntUnit) String() string {
	return proto.EnumName(TimeFormat_IntUnit_name, int32(x))
}

func (TimeFormat_IntUnit) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f2375ce5ebe45416, []int{1, 1}
}

type NumberFormat_Builtin int32

const (
	NumberFormat_decimal        NumberFormat_Builtin = 0
	NumberFormat_percent        NumberFormat_Builtin = 1
	NumberFormat_scientific     NumberFormat_Builtin = 2
	NumberFormat_currency       NumberFormat_Builtin = 3
	NumberFormat_currencySimple NumberFormat_Builtin = 4
)

var NumberFormat_Builtin_name = map[int32]string{
	0: "decimal",
	1: "percent",
	2: "scientific",
	3: "currency",
	4: "currencySimple",
}

var NumberFormat_Builtin_value = map[string]int32{
	"decimal":        0,
	"percent":        1,
	"scientific":     2,
	"currency":       3,
	"currencySimple": 4,
}

func (x NumberFormat_Builtin) String() string {
	return proto.EnumName(NumberFormat_Builtin_name, int32(x))
}

func (NumberFormat_Builtin) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f2375ce5ebe45416, []int{3, 0}
}

type Format struct {
	// Types that are valid to be assigned to Type:
	//	*Format_Time
	//	*Format_Currency
	//	*Format_Number
	Type                 isFormat_Type `protobuf_oneof:"type"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Format) Reset()         { *m = Format{} }
func (m *Format) String() string { return proto.CompactTextString(m) }
func (*Format) ProtoMessage()    {}
func (*Format) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2375ce5ebe45416, []int{0}
}

func (m *Format) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Format.Unmarshal(m, b)
}
func (m *Format) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Format.Marshal(b, m, deterministic)
}
func (m *Format) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Format.Merge(m, src)
}
func (m *Format) XXX_Size() int {
	return xxx_messageInfo_Format.Size(m)
}
func (m *Format) XXX_DiscardUnknown() {
	xxx_messageInfo_Format.DiscardUnknown(m)
}

var xxx_messageInfo_Format proto.InternalMessageInfo

type isFormat_Type interface {
	isFormat_Type()
}

type Format_Time struct {
	Time *TimeFormat `protobuf:"bytes,1,opt,name=time,proto3,oneof"`
}

type Format_Currency struct {
	Currency *CurrencyFormat `protobuf:"bytes,2,opt,name=currency,proto3,oneof"`
}

type Format_Number struct {
	Number *NumberFormat `protobuf:"bytes,3,opt,name=number,proto3,oneof"`
}

func (*Format_Time) isFormat_Type() {}

func (*Format_Currency) isFormat_Type() {}

func (*Format_Number) isFormat_Type() {}

func (m *Format) GetType() isFormat_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *Format) GetTime() *TimeFormat {
	if x, ok := m.GetType().(*Format_Time); ok {
		return x.Time
	}
	return nil
}

func (m *Format) GetCurrency() *CurrencyFormat {
	if x, ok := m.GetType().(*Format_Currency); ok {
		return x.Currency
	}
	return nil
}

func (m *Format) GetNumber() *NumberFormat {
	if x, ok := m.GetType().(*Format_Number); ok {
		return x.Number
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Format) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Format_Time)(nil),
		(*Format_Currency)(nil),
		(*Format_Number)(nil),
	}
}

type TimeFormat struct {
	// Types that are valid to be assigned to Type:
	//	*TimeFormat_Builtin_
	//	*TimeFormat_Imported
	//	*TimeFormat_Custom
	Type isTimeFormat_Type `protobuf_oneof:"type"`
	// only valid on int types, and must set if type is int
	IntUnit              TimeFormat_IntUnit `protobuf:"varint,4,opt,name=intUnit,proto3,enum=pgde.format.TimeFormat_IntUnit" json:"intUnit,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *TimeFormat) Reset()         { *m = TimeFormat{} }
func (m *TimeFormat) String() string { return proto.CompactTextString(m) }
func (*TimeFormat) ProtoMessage()    {}
func (*TimeFormat) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2375ce5ebe45416, []int{1}
}

func (m *TimeFormat) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TimeFormat.Unmarshal(m, b)
}
func (m *TimeFormat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TimeFormat.Marshal(b, m, deterministic)
}
func (m *TimeFormat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimeFormat.Merge(m, src)
}
func (m *TimeFormat) XXX_Size() int {
	return xxx_messageInfo_TimeFormat.Size(m)
}
func (m *TimeFormat) XXX_DiscardUnknown() {
	xxx_messageInfo_TimeFormat.DiscardUnknown(m)
}

var xxx_messageInfo_TimeFormat proto.InternalMessageInfo

type isTimeFormat_Type interface {
	isTimeFormat_Type()
}

type TimeFormat_Builtin_ struct {
	Builtin TimeFormat_Builtin `protobuf:"varint,1,opt,name=builtin,proto3,enum=pgde.format.TimeFormat_Builtin,oneof"`
}

type TimeFormat_Imported struct {
	Imported string `protobuf:"bytes,2,opt,name=imported,proto3,oneof"`
}

type TimeFormat_Custom struct {
	Custom string `protobuf:"bytes,3,opt,name=custom,proto3,oneof"`
}

func (*TimeFormat_Builtin_) isTimeFormat_Type() {}

func (*TimeFormat_Imported) isTimeFormat_Type() {}

func (*TimeFormat_Custom) isTimeFormat_Type() {}

func (m *TimeFormat) GetType() isTimeFormat_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *TimeFormat) GetBuiltin() TimeFormat_Builtin {
	if x, ok := m.GetType().(*TimeFormat_Builtin_); ok {
		return x.Builtin
	}
	return TimeFormat_mediumDate
}

func (m *TimeFormat) GetImported() string {
	if x, ok := m.GetType().(*TimeFormat_Imported); ok {
		return x.Imported
	}
	return ""
}

func (m *TimeFormat) GetCustom() string {
	if x, ok := m.GetType().(*TimeFormat_Custom); ok {
		return x.Custom
	}
	return ""
}

func (m *TimeFormat) GetIntUnit() TimeFormat_IntUnit {
	if m != nil {
		return m.IntUnit
	}
	return TimeFormat_und
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*TimeFormat) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*TimeFormat_Builtin_)(nil),
		(*TimeFormat_Imported)(nil),
		(*TimeFormat_Custom)(nil),
	}
}

type CurrencyFormat struct {
	// Types that are valid to be assigned to Type:
	//	*CurrencyFormat_Code
	//	*CurrencyFormat_Symbol
	//	*CurrencyFormat_Name
	Type isCurrencyFormat_Type `protobuf_oneof:"type"`
	// only valid for int currency
	// move decimal point left when showing
	// move decimal point right back when saving
	// need promise the visible fractional digits when showing
	// showing: 1 cent => 0.01 dolar
	// saving: 0.01 dolar => 1 cent
	CentMode             bool     `protobuf:"varint,4,opt,name=centMode,proto3" json:"centMode,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CurrencyFormat) Reset()         { *m = CurrencyFormat{} }
func (m *CurrencyFormat) String() string { return proto.CompactTextString(m) }
func (*CurrencyFormat) ProtoMessage()    {}
func (*CurrencyFormat) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2375ce5ebe45416, []int{2}
}

func (m *CurrencyFormat) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CurrencyFormat.Unmarshal(m, b)
}
func (m *CurrencyFormat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CurrencyFormat.Marshal(b, m, deterministic)
}
func (m *CurrencyFormat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CurrencyFormat.Merge(m, src)
}
func (m *CurrencyFormat) XXX_Size() int {
	return xxx_messageInfo_CurrencyFormat.Size(m)
}
func (m *CurrencyFormat) XXX_DiscardUnknown() {
	xxx_messageInfo_CurrencyFormat.DiscardUnknown(m)
}

var xxx_messageInfo_CurrencyFormat proto.InternalMessageInfo

type isCurrencyFormat_Type interface {
	isCurrencyFormat_Type()
}

type CurrencyFormat_Code struct {
	Code Currency `protobuf:"varint,1,opt,name=code,proto3,enum=pgde.format.Currency,oneof"`
}

type CurrencyFormat_Symbol struct {
	Symbol Currency `protobuf:"varint,2,opt,name=symbol,proto3,enum=pgde.format.Currency,oneof"`
}

type CurrencyFormat_Name struct {
	Name Currency `protobuf:"varint,3,opt,name=name,proto3,enum=pgde.format.Currency,oneof"`
}

func (*CurrencyFormat_Code) isCurrencyFormat_Type() {}

func (*CurrencyFormat_Symbol) isCurrencyFormat_Type() {}

func (*CurrencyFormat_Name) isCurrencyFormat_Type() {}

func (m *CurrencyFormat) GetType() isCurrencyFormat_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *CurrencyFormat) GetCode() Currency {
	if x, ok := m.GetType().(*CurrencyFormat_Code); ok {
		return x.Code
	}
	return Currency_XXX
}

func (m *CurrencyFormat) GetSymbol() Currency {
	if x, ok := m.GetType().(*CurrencyFormat_Symbol); ok {
		return x.Symbol
	}
	return Currency_XXX
}

func (m *CurrencyFormat) GetName() Currency {
	if x, ok := m.GetType().(*CurrencyFormat_Name); ok {
		return x.Name
	}
	return Currency_XXX
}

func (m *CurrencyFormat) GetCentMode() bool {
	if m != nil {
		return m.CentMode
	}
	return false
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CurrencyFormat) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CurrencyFormat_Code)(nil),
		(*CurrencyFormat_Symbol)(nil),
		(*CurrencyFormat_Name)(nil),
	}
}

type NumberFormat struct {
	// Types that are valid to be assigned to Type:
	//	*NumberFormat_Builtin_
	//	*NumberFormat_Imported
	//	*NumberFormat_Custom
	Type                 isNumberFormat_Type `protobuf_oneof:"type"`
	Locale               string              `protobuf:"bytes,4,opt,name=locale,proto3" json:"locale,omitempty"`
	Ordinal              bool                `protobuf:"varint,5,opt,name=ordinal,proto3" json:"ordinal,omitempty"`
	Unit                 *units.Unit         `protobuf:"bytes,6,opt,name=unit,proto3" json:"unit,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *NumberFormat) Reset()         { *m = NumberFormat{} }
func (m *NumberFormat) String() string { return proto.CompactTextString(m) }
func (*NumberFormat) ProtoMessage()    {}
func (*NumberFormat) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2375ce5ebe45416, []int{3}
}

func (m *NumberFormat) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NumberFormat.Unmarshal(m, b)
}
func (m *NumberFormat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NumberFormat.Marshal(b, m, deterministic)
}
func (m *NumberFormat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NumberFormat.Merge(m, src)
}
func (m *NumberFormat) XXX_Size() int {
	return xxx_messageInfo_NumberFormat.Size(m)
}
func (m *NumberFormat) XXX_DiscardUnknown() {
	xxx_messageInfo_NumberFormat.DiscardUnknown(m)
}

var xxx_messageInfo_NumberFormat proto.InternalMessageInfo

type isNumberFormat_Type interface {
	isNumberFormat_Type()
}

type NumberFormat_Builtin_ struct {
	Builtin NumberFormat_Builtin `protobuf:"varint,1,opt,name=builtin,proto3,enum=pgde.format.NumberFormat_Builtin,oneof"`
}

type NumberFormat_Imported struct {
	Imported string `protobuf:"bytes,2,opt,name=imported,proto3,oneof"`
}

type NumberFormat_Custom struct {
	Custom string `protobuf:"bytes,3,opt,name=custom,proto3,oneof"`
}

func (*NumberFormat_Builtin_) isNumberFormat_Type() {}

func (*NumberFormat_Imported) isNumberFormat_Type() {}

func (*NumberFormat_Custom) isNumberFormat_Type() {}

func (m *NumberFormat) GetType() isNumberFormat_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *NumberFormat) GetBuiltin() NumberFormat_Builtin {
	if x, ok := m.GetType().(*NumberFormat_Builtin_); ok {
		return x.Builtin
	}
	return NumberFormat_decimal
}

func (m *NumberFormat) GetImported() string {
	if x, ok := m.GetType().(*NumberFormat_Imported); ok {
		return x.Imported
	}
	return ""
}

func (m *NumberFormat) GetCustom() string {
	if x, ok := m.GetType().(*NumberFormat_Custom); ok {
		return x.Custom
	}
	return ""
}

func (m *NumberFormat) GetLocale() string {
	if m != nil {
		return m.Locale
	}
	return ""
}

func (m *NumberFormat) GetOrdinal() bool {
	if m != nil {
		return m.Ordinal
	}
	return false
}

func (m *NumberFormat) GetUnit() *units.Unit {
	if m != nil {
		return m.Unit
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*NumberFormat) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*NumberFormat_Builtin_)(nil),
		(*NumberFormat_Imported)(nil),
		(*NumberFormat_Custom)(nil),
	}
}

var E_To = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.FieldOptions)(nil),
	ExtensionType: (*Format)(nil),
	Field:         919111,
	Name:          "pgde.format.to",
	Tag:           "bytes,919111,opt,name=to",
	Filename:      "pgde/format/format.proto",
}

func init() {
	proto.RegisterEnum("pgde.format.TimeFormat_Builtin", TimeFormat_Builtin_name, TimeFormat_Builtin_value)
	proto.RegisterEnum("pgde.format.TimeFormat_IntUnit", TimeFormat_IntUnit_name, TimeFormat_IntUnit_value)
	proto.RegisterEnum("pgde.format.NumberFormat_Builtin", NumberFormat_Builtin_name, NumberFormat_Builtin_value)
	proto.RegisterType((*Format)(nil), "pgde.format.Format")
	proto.RegisterType((*TimeFormat)(nil), "pgde.format.TimeFormat")
	proto.RegisterType((*CurrencyFormat)(nil), "pgde.format.CurrencyFormat")
	proto.RegisterType((*NumberFormat)(nil), "pgde.format.NumberFormat")
	proto.RegisterExtension(E_To)
}

func init() { proto.RegisterFile("pgde/format/format.proto", fileDescriptor_f2375ce5ebe45416) }

var fileDescriptor_f2375ce5ebe45416 = []byte{
	// 699 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0xc1, 0x6e, 0xd3, 0x4c,
	0x10, 0x8e, 0x13, 0xc7, 0x76, 0x27, 0x55, 0xba, 0xff, 0x56, 0xed, 0xef, 0x3f, 0x3f, 0x88, 0x12,
	0x71, 0x40, 0x42, 0x71, 0xa4, 0x96, 0x43, 0x5b, 0xc4, 0xa5, 0x44, 0x55, 0x39, 0x00, 0x52, 0xa0,
	0x17, 0x6e, 0xce, 0x7a, 0x93, 0xae, 0xea, 0xdd, 0xb5, 0xd6, 0x6b, 0xd1, 0xbc, 0x03, 0x0f, 0xc1,
	0x1b, 0xf0, 0x02, 0x48, 0x1c, 0x79, 0x0f, 0x9e, 0x04, 0xed, 0xae, 0x9d, 0x26, 0x88, 0xf6, 0xc4,
	0x25, 0xd9, 0x99, 0xf9, 0x66, 0xf6, 0xdb, 0x99, 0xcf, 0x03, 0x71, 0xb1, 0xc8, 0xe8, 0x78, 0x2e,
	0x15, 0x4f, 0x75, 0xfd, 0x97, 0x14, 0x4a, 0x6a, 0x89, 0x7b, 0x26, 0x92, 0x38, 0xd7, 0xe0, 0x60,
	0x21, 0xe5, 0x22, 0xa7, 0x63, 0x1b, 0x9a, 0x55, 0xf3, 0x71, 0x46, 0x4b, 0xa2, 0x58, 0xa1, 0xa5,
	0x72, 0xf0, 0xc1, 0x60, 0xbd, 0x10, 0xa9, 0x94, 0xa2, 0x82, 0x2c, 0xeb, 0xd8, 0xbe, 0x8d, 0x55,
	0x82, 0xe9, 0xd2, 0xfd, 0x3a, 0xff, 0xf0, 0xab, 0x07, 0xc1, 0xb9, 0xcd, 0xc0, 0x23, 0xf0, 0x35,
	0xe3, 0x34, 0xf6, 0x0e, 0xbc, 0xa7, 0xbd, 0xc3, 0x7f, 0x93, 0xb5, 0xcb, 0x93, 0x0f, 0x8c, 0x53,
	0x07, 0xbb, 0x68, 0x4d, 0x2d, 0x0c, 0x9f, 0x40, 0xd4, 0xdc, 0x11, 0xb7, 0x6d, 0xca, 0xff, 0x1b,
	0x29, 0xaf, 0xea, 0xe0, 0x2a, 0x6d, 0x05, 0xc7, 0x47, 0x10, 0x88, 0x8a, 0xcf, 0xa8, 0x8a, 0x3b,
	0x36, 0xf1, 0xbf, 0x8d, 0xc4, 0xb7, 0x36, 0xb4, 0x4a, 0xab, 0xa1, 0x67, 0x01, 0xf8, 0x7a, 0x59,
	0xd0, 0xe1, 0xcf, 0x0e, 0xc0, 0x2d, 0x1d, 0xfc, 0x02, 0xc2, 0x59, 0xc5, 0x72, 0xcd, 0x84, 0x25,
	0xde, 0x3f, 0x7c, 0x74, 0x07, 0xf1, 0xe4, 0xcc, 0xc1, 0x2e, 0x5a, 0xd3, 0x26, 0x03, 0x3f, 0x80,
	0x88, 0xf1, 0x42, 0x2a, 0x4d, 0x33, 0xfb, 0x86, 0x2d, 0x43, 0xb3, 0xf1, 0xe0, 0x18, 0x02, 0x52,
	0x95, 0x5a, 0x72, 0x4b, 0xd3, 0xc4, 0x6a, 0x1b, 0x9f, 0x40, 0xc8, 0x84, 0xbe, 0x14, 0x4c, 0xc7,
	0xfe, 0xfd, 0x97, 0xbe, 0x76, 0xb0, 0x69, 0x83, 0x1f, 0x7e, 0xf1, 0x20, 0xac, 0x99, 0xe0, 0x3e,
	0x00, 0xa7, 0x19, 0xab, 0xf8, 0x24, 0xd5, 0x14, 0xb5, 0xf0, 0x36, 0x44, 0xf3, 0x2a, 0xcf, 0x27,
	0xa9, 0x4e, 0x91, 0x87, 0xb7, 0xa0, 0x2b, 0xe7, 0x93, 0x74, 0x89, 0xda, 0x26, 0x60, 0x8f, 0x87,
	0xcf, 0x2f, 0x50, 0x07, 0x63, 0xe8, 0xdf, 0xa6, 0x99, 0x59, 0x20, 0x1f, 0xef, 0xc1, 0x3f, 0x9b,
	0x3e, 0x03, 0xed, 0x62, 0x04, 0xdb, 0x75, 0x45, 0x07, 0x0c, 0xf0, 0x2e, 0xec, 0xac, 0x7b, 0x0c,
	0x2c, 0x34, 0xf5, 0xb3, 0x4a, 0xa5, 0x9a, 0x49, 0x81, 0xa2, 0xe1, 0x12, 0xc2, 0x9a, 0x36, 0x0e,
	0xa1, 0x53, 0x89, 0x0c, 0xb5, 0x0c, 0x55, 0x91, 0x0a, 0x59, 0x52, 0x22, 0x45, 0x86, 0x3c, 0xbc,
	0x03, 0x3d, 0xce, 0x88, 0x6a, 0x1c, 0x6d, 0xe7, 0xc8, 0x73, 0x56, 0x3b, 0x3a, 0x18, 0x20, 0xa8,
	0xcf, 0xbe, 0x39, 0x73, 0x26, 0x2a, 0x4d, 0x51, 0x17, 0x47, 0xe0, 0x5f, 0xc9, 0x4a, 0xa1, 0xc0,
	0x14, 0xcf, 0xd2, 0x25, 0x0a, 0x8d, 0xeb, 0x13, 0xa5, 0xd7, 0x28, 0x5a, 0x0d, 0xf9, 0xbb, 0x07,
	0xfd, 0x4d, 0x01, 0xe1, 0x67, 0xe0, 0x13, 0x99, 0xd1, 0x7a, 0xca, 0x7b, 0x7f, 0xd4, 0x9a, 0x11,
	0xa7, 0x01, 0xe1, 0x31, 0x04, 0xe5, 0x92, 0xcf, 0x64, 0x6e, 0xc7, 0x7a, 0x0f, 0xbc, 0x86, 0x99,
	0xea, 0x22, 0xe5, 0xd4, 0x4e, 0xfa, 0xbe, 0xea, 0x06, 0x84, 0x07, 0x10, 0x11, 0x2a, 0xf4, 0x1b,
	0x43, 0xc7, 0xcc, 0x3f, 0x9a, 0xae, 0xec, 0xd5, 0x0b, 0xbe, 0xb5, 0x61, 0x7b, 0x5d, 0xc9, 0xf8,
	0xe5, 0xef, 0x42, 0x7d, 0x7c, 0xa7, 0xea, 0xff, 0xa6, 0x54, 0xf7, 0x21, 0xc8, 0x25, 0x49, 0x73,
	0xc7, 0x74, 0x6b, 0x5a, 0x5b, 0x38, 0x86, 0x50, 0xaa, 0x8c, 0x89, 0x34, 0x8f, 0xbb, 0xf6, 0x09,
	0x8d, 0x89, 0x9f, 0x80, 0x6f, 0x36, 0x44, 0x1c, 0xd8, 0x6f, 0x13, 0x39, 0x96, 0x6e, 0x67, 0x58,
	0x29, 0xdb, 0xe8, 0xf0, 0xf2, 0x56, 0xc6, 0x3d, 0x08, 0x33, 0x4a, 0x18, 0x4f, 0x73, 0xd4, 0x32,
	0x46, 0x41, 0x95, 0x69, 0x07, 0xf2, 0x8c, 0x6a, 0x4a, 0xc2, 0xa8, 0xd0, 0x6c, 0xce, 0x88, 0xd3,
	0x71, 0xb3, 0x04, 0x9c, 0x8e, 0x1b, 0xeb, 0x3d, 0xe3, 0x45, 0x4e, 0x91, 0xdf, 0xb4, 0xef, 0x74,
	0x02, 0x6d, 0x2d, 0xf1, 0xc3, 0xc4, 0x2d, 0xbd, 0xa4, 0x59, 0x7a, 0xc9, 0x39, 0xa3, 0x79, 0xf6,
	0xae, 0x30, 0x4a, 0x2d, 0xe3, 0x1f, 0x9f, 0x8f, 0x2d, 0xc7, 0xdd, 0x8d, 0x4e, 0xba, 0x1e, 0x4e,
	0xdb, 0x5a, 0x9e, 0x9d, 0x7e, 0x3c, 0x5e, 0x30, 0x7d, 0x55, 0xcd, 0x12, 0x22, 0xf9, 0x98, 0xf2,
	0x82, 0x29, 0x3a, 0x97, 0x37, 0x6e, 0x87, 0x92, 0xd1, 0x82, 0x8a, 0x51, 0x96, 0x2a, 0x3d, 0xa2,
	0x37, 0x7a, 0x5c, 0x5c, 0x2f, 0xc6, 0x6b, 0x0b, 0x74, 0x16, 0x58, 0xd0, 0xd1, 0xaf, 0x00, 0x00,
	0x00, 0xff, 0xff, 0xba, 0x96, 0x6f, 0x4b, 0x9f, 0x05, 0x00, 0x00,
}
