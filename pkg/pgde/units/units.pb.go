// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pgde/units/units.proto

// https://physics.nist.gov/cuu/Units/units.html

package units

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	descriptor "github.com/golang/protobuf/protoc-gen-go/descriptor"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PrefixType int32

const (
	PrefixType_symbol PrefixType = 0
	PrefixType_title  PrefixType = 1
)

var PrefixType_name = map[int32]string{
	0: "symbol",
	1: "title",
}

var PrefixType_value = map[string]int32{
	"symbol": 0,
	"title":  1,
}

func (x PrefixType) String() string {
	return proto.EnumName(PrefixType_name, int32(x))
}

func (PrefixType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4314624ab7830069, []int{0}
}

type Show_AtomType int32

const (
	Show_symbol Show_AtomType = 0
	// plural Form.one
	Show_one Show_AtomType = 1
	// plural Form.other
	Show_other Show_AtomType = 2
	// parse Form from plural tool
	Show_parse Show_AtomType = 3
)

var Show_AtomType_name = map[int32]string{
	0: "symbol",
	1: "one",
	2: "other",
	3: "parse",
}

var Show_AtomType_value = map[string]int32{
	"symbol": 0,
	"one":    1,
	"other":  2,
	"parse":  3,
}

func (x Show_AtomType) String() string {
	return proto.EnumName(Show_AtomType_name, int32(x))
}

func (Show_AtomType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4314624ab7830069, []int{1, 0}
}

type Unit struct {
	Show                 *Show    `protobuf:"bytes,1,opt,name=show,proto3" json:"show,omitempty"`
	Dots                 []*Cell  `protobuf:"bytes,2,rep,name=dots,proto3" json:"dots,omitempty"`
	Per                  []*Cell  `protobuf:"bytes,3,rep,name=per,proto3" json:"per,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Unit) Reset()         { *m = Unit{} }
func (m *Unit) String() string { return proto.CompactTextString(m) }
func (*Unit) ProtoMessage()    {}
func (*Unit) Descriptor() ([]byte, []int) {
	return fileDescriptor_4314624ab7830069, []int{0}
}

func (m *Unit) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Unit.Unmarshal(m, b)
}
func (m *Unit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Unit.Marshal(b, m, deterministic)
}
func (m *Unit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Unit.Merge(m, src)
}
func (m *Unit) XXX_Size() int {
	return xxx_messageInfo_Unit.Size(m)
}
func (m *Unit) XXX_DiscardUnknown() {
	xxx_messageInfo_Unit.DiscardUnknown(m)
}

var xxx_messageInfo_Unit proto.InternalMessageInfo

func (m *Unit) GetShow() *Show {
	if m != nil {
		return m.Show
	}
	return nil
}

func (m *Unit) GetDots() []*Cell {
	if m != nil {
		return m.Dots
	}
	return nil
}

func (m *Unit) GetPer() []*Cell {
	if m != nil {
		return m.Per
	}
	return nil
}

type Show struct {
	Off                  bool          `protobuf:"varint,1,opt,name=off,proto3" json:"off,omitempty"`
	Prefix               PrefixType    `protobuf:"varint,2,opt,name=prefix,proto3,enum=pgde.units.PrefixType" json:"prefix,omitempty"`
	Atom                 Show_AtomType `protobuf:"varint,3,opt,name=atom,proto3,enum=pgde.units.Show_AtomType" json:"atom,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Show) Reset()         { *m = Show{} }
func (m *Show) String() string { return proto.CompactTextString(m) }
func (*Show) ProtoMessage()    {}
func (*Show) Descriptor() ([]byte, []int) {
	return fileDescriptor_4314624ab7830069, []int{1}
}

func (m *Show) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Show.Unmarshal(m, b)
}
func (m *Show) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Show.Marshal(b, m, deterministic)
}
func (m *Show) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Show.Merge(m, src)
}
func (m *Show) XXX_Size() int {
	return xxx_messageInfo_Show.Size(m)
}
func (m *Show) XXX_DiscardUnknown() {
	xxx_messageInfo_Show.DiscardUnknown(m)
}

var xxx_messageInfo_Show proto.InternalMessageInfo

func (m *Show) GetOff() bool {
	if m != nil {
		return m.Off
	}
	return false
}

func (m *Show) GetPrefix() PrefixType {
	if m != nil {
		return m.Prefix
	}
	return PrefixType_symbol
}

func (m *Show) GetAtom() Show_AtomType {
	if m != nil {
		return m.Atom
	}
	return Show_symbol
}

type Cell struct {
	Exponent int32  `protobuf:"varint,1,opt,name=exponent,proto3" json:"exponent,omitempty"`
	Prefix   Prefix `protobuf:"varint,2,opt,name=prefix,proto3,enum=pgde.units.Prefix" json:"prefix,omitempty"`
	// Types that are valid to be assigned to Type:
	//	*Cell_Atom
	//	*Cell_Symbol
	Type                 isCell_Type `protobuf_oneof:"type"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Cell) Reset()         { *m = Cell{} }
func (m *Cell) String() string { return proto.CompactTextString(m) }
func (*Cell) ProtoMessage()    {}
func (*Cell) Descriptor() ([]byte, []int) {
	return fileDescriptor_4314624ab7830069, []int{2}
}

func (m *Cell) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Cell.Unmarshal(m, b)
}
func (m *Cell) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Cell.Marshal(b, m, deterministic)
}
func (m *Cell) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Cell.Merge(m, src)
}
func (m *Cell) XXX_Size() int {
	return xxx_messageInfo_Cell.Size(m)
}
func (m *Cell) XXX_DiscardUnknown() {
	xxx_messageInfo_Cell.DiscardUnknown(m)
}

var xxx_messageInfo_Cell proto.InternalMessageInfo

func (m *Cell) GetExponent() int32 {
	if m != nil {
		return m.Exponent
	}
	return 0
}

func (m *Cell) GetPrefix() Prefix {
	if m != nil {
		return m.Prefix
	}
	return Prefix_noPrefix
}

type isCell_Type interface {
	isCell_Type()
}

type Cell_Atom struct {
	Atom Atom `protobuf:"varint,3,opt,name=atom,proto3,enum=pgde.units.Atom,oneof"`
}

type Cell_Symbol struct {
	Symbol string `protobuf:"bytes,4,opt,name=symbol,proto3,oneof"`
}

func (*Cell_Atom) isCell_Type() {}

func (*Cell_Symbol) isCell_Type() {}

func (m *Cell) GetType() isCell_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *Cell) GetAtom() Atom {
	if x, ok := m.GetType().(*Cell_Atom); ok {
		return x.Atom
	}
	return Atom_noAtom
}

func (m *Cell) GetSymbol() string {
	if x, ok := m.GetType().(*Cell_Symbol); ok {
		return x.Symbol
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Cell) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Cell_Atom)(nil),
		(*Cell_Symbol)(nil),
	}
}

var E_Unit = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.FieldOptions)(nil),
	ExtensionType: (*Unit)(nil),
	Field:         919112,
	Name:          "pgde.units.unit",
	Tag:           "bytes,919112,opt,name=unit",
	Filename:      "pgde/units/units.proto",
}

func init() {
	proto.RegisterEnum("pgde.units.PrefixType", PrefixType_name, PrefixType_value)
	proto.RegisterEnum("pgde.units.Show_AtomType", Show_AtomType_name, Show_AtomType_value)
	proto.RegisterType((*Unit)(nil), "pgde.units.Unit")
	proto.RegisterType((*Show)(nil), "pgde.units.Show")
	proto.RegisterType((*Cell)(nil), "pgde.units.Cell")
	proto.RegisterExtension(E_Unit)
}

func init() { proto.RegisterFile("pgde/units/units.proto", fileDescriptor_4314624ab7830069) }

var fileDescriptor_4314624ab7830069 = []byte{
	// 431 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0xdf, 0x8a, 0xd3, 0x40,
	0x14, 0xc6, 0x9b, 0x26, 0xad, 0xed, 0x11, 0x24, 0x0c, 0xb8, 0x8e, 0x05, 0x21, 0x44, 0x91, 0xb2,
	0xd0, 0x09, 0xac, 0x88, 0x7f, 0xee, 0x5c, 0x51, 0xf6, 0x4e, 0x89, 0x7a, 0xe3, 0x5d, 0xdb, 0x9c,
	0xa4, 0x83, 0x49, 0xce, 0x30, 0x99, 0xba, 0xe9, 0x3b, 0xf8, 0x00, 0x3e, 0x85, 0xcf, 0xe1, 0x63,
	0xc9, 0x4c, 0xda, 0xed, 0x3f, 0xbc, 0x19, 0x66, 0xce, 0xf7, 0xcd, 0x99, 0xdf, 0x1c, 0x3e, 0xb8,
	0x50, 0x45, 0x86, 0xc9, 0xba, 0x96, 0xa6, 0xe9, 0x56, 0xa1, 0x34, 0x19, 0x62, 0x60, 0xeb, 0xc2,
	0x55, 0x26, 0x51, 0x41, 0x54, 0x94, 0x98, 0x38, 0x65, 0xb1, 0xce, 0x93, 0x0c, 0x9b, 0xa5, 0x96,
	0xca, 0x90, 0xee, 0xdc, 0x93, 0x47, 0x07, 0x5d, 0x94, 0xc6, 0x5c, 0xb6, 0x5b, 0xe1, 0xe1, 0x81,
	0x30, 0x37, 0x54, 0x75, 0xe5, 0xf8, 0x27, 0x04, 0xdf, 0x6a, 0x69, 0xd8, 0x33, 0x08, 0x9a, 0x15,
	0xdd, 0x72, 0x2f, 0xf2, 0xa6, 0xf7, 0xaf, 0x42, 0xb1, 0x7f, 0x54, 0x7c, 0x59, 0xd1, 0x6d, 0xea,
	0x54, 0xeb, 0xca, 0xc8, 0x34, 0xbc, 0x1f, 0xf9, 0xa7, 0xae, 0xf7, 0x58, 0x96, 0xa9, 0x53, 0x59,
	0x0c, 0xbe, 0x42, 0xcd, 0xfd, 0xff, 0x98, 0xac, 0x18, 0xff, 0xf1, 0x20, 0xb0, 0x8d, 0x59, 0x08,
	0x3e, 0xe5, 0xb9, 0x7b, 0x77, 0x94, 0xda, 0x2d, 0x13, 0x30, 0xec, 0xc8, 0x79, 0x3f, 0xf2, 0xa6,
	0x0f, 0xae, 0x2e, 0x0e, 0x3b, 0x7c, 0x76, 0xca, 0xd7, 0x8d, 0xc2, 0x74, 0xeb, 0x62, 0x33, 0x08,
	0xec, 0x87, 0xb8, 0xef, 0xdc, 0x8f, 0x4f, 0xd1, 0xc5, 0x3b, 0x43, 0x95, 0xbb, 0xe0, 0x6c, 0xf1,
	0x4b, 0x18, 0xed, 0x2a, 0x0c, 0x60, 0xd8, 0x6c, 0xaa, 0x05, 0x95, 0x61, 0x8f, 0xdd, 0x03, 0x9f,
	0x6a, 0x0c, 0x3d, 0x36, 0x86, 0x01, 0x99, 0x15, 0xea, 0xb0, 0x6f, 0xb7, 0x6a, 0xae, 0x1b, 0x0c,
	0xfd, 0xf8, 0xb7, 0x07, 0x81, 0xc5, 0x67, 0x13, 0x18, 0x61, 0xab, 0xa8, 0xc6, 0xda, 0x38, 0xea,
	0x41, 0x7a, 0x77, 0x66, 0x97, 0x27, 0xe8, 0xec, 0x1c, 0xfd, 0x0e, 0xfb, 0xf9, 0x11, 0xf6, 0xd1,
	0x98, 0x2c, 0xdf, 0x4d, 0xaf, 0xe3, 0x65, 0x7c, 0xc7, 0xc8, 0x83, 0xc8, 0x9b, 0x8e, 0x6f, 0x7a,
	0xe9, 0xf6, 0x7c, 0x3d, 0x84, 0xc0, 0x6c, 0x14, 0x5e, 0x3e, 0x05, 0xd8, 0x8f, 0xe5, 0xe8, 0x4f,
	0x63, 0x18, 0x18, 0x69, 0x4a, 0x0c, 0xbd, 0xb7, 0x1f, 0x20, 0xb0, 0xcd, 0xd9, 0x13, 0xd1, 0x65,
	0x48, 0xec, 0x32, 0x24, 0x3e, 0x4a, 0x2c, 0xb3, 0x4f, 0xca, 0x48, 0xaa, 0x1b, 0xfe, 0xf7, 0xd7,
	0xeb, 0xf3, 0x04, 0xd8, 0x84, 0xa4, 0xee, 0xfa, 0xf5, 0x9b, 0xef, 0xaf, 0x0a, 0x69, 0x56, 0xeb,
	0x85, 0x58, 0x52, 0x95, 0x60, 0xa5, 0xa4, 0xc6, 0x9c, 0xda, 0x2e, 0x91, 0xcb, 0x59, 0x81, 0xf5,
	0x2c, 0x9b, 0x6b, 0x33, 0xc3, 0xd6, 0x24, 0xea, 0x47, 0x91, 0xec, 0x53, 0xb7, 0x18, 0x3a, 0xcf,
	0x8b, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x96, 0xc7, 0xe2, 0xd7, 0xe9, 0x02, 0x00, 0x00,
}
