// Code generated by protoc-gen-go. DO NOT EDIT.
// source: protos/units/units.proto

package units // import "github.com/empirefox/protoc-gen-dart-ext/pkg/units"

/*
https://physics.nist.gov/cuu/Units/units.html
*/

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import descriptor "github.com/golang/protobuf/protoc-gen-go/descriptor"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CellPrefix_ShowType int32

const (
	CellPrefix_symbol CellPrefix_ShowType = 0
	CellPrefix_name   CellPrefix_ShowType = 1
)

var CellPrefix_ShowType_name = map[int32]string{
	0: "symbol",
	1: "name",
}
var CellPrefix_ShowType_value = map[string]int32{
	"symbol": 0,
	"name":   1,
}

func (x CellPrefix_ShowType) String() string {
	return proto.EnumName(CellPrefix_ShowType_name, int32(x))
}
func (CellPrefix_ShowType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_units_3e60ab24617b7349, []int{2, 0}
}

type CurrencyUnit_ShowType int32

const (
	CurrencyUnit_code   CurrencyUnit_ShowType = 0
	CurrencyUnit_symbol CurrencyUnit_ShowType = 1
	CurrencyUnit_name   CurrencyUnit_ShowType = 2
)

var CurrencyUnit_ShowType_name = map[int32]string{
	0: "code",
	1: "symbol",
	2: "name",
}
var CurrencyUnit_ShowType_value = map[string]int32{
	"code":   0,
	"symbol": 1,
	"name":   2,
}

func (x CurrencyUnit_ShowType) String() string {
	return proto.EnumName(CurrencyUnit_ShowType_name, int32(x))
}
func (CurrencyUnit_ShowType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_units_3e60ab24617b7349, []int{3, 0}
}

type AtomUnit_ShowType int32

const (
	AtomUnit_symbol   AtomUnit_ShowType = 0
	AtomUnit_singular AtomUnit_ShowType = 1
	AtomUnit_plural   AtomUnit_ShowType = 2
	AtomUnit_parse    AtomUnit_ShowType = 3
)

var AtomUnit_ShowType_name = map[int32]string{
	0: "symbol",
	1: "singular",
	2: "plural",
	3: "parse",
}
var AtomUnit_ShowType_value = map[string]int32{
	"symbol":   0,
	"singular": 1,
	"plural":   2,
	"parse":    3,
}

func (x AtomUnit_ShowType) String() string {
	return proto.EnumName(AtomUnit_ShowType_name, int32(x))
}
func (AtomUnit_ShowType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_units_3e60ab24617b7349, []int{4, 0}
}

type Unit struct {
	Dots                 []*Cell  `protobuf:"bytes,1,rep,name=dots,proto3" json:"dots,omitempty"`
	Per                  []*Cell  `protobuf:"bytes,2,rep,name=per,proto3" json:"per,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Unit) Reset()         { *m = Unit{} }
func (m *Unit) String() string { return proto.CompactTextString(m) }
func (*Unit) ProtoMessage()    {}
func (*Unit) Descriptor() ([]byte, []int) {
	return fileDescriptor_units_3e60ab24617b7349, []int{0}
}
func (m *Unit) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Unit.Unmarshal(m, b)
}
func (m *Unit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Unit.Marshal(b, m, deterministic)
}
func (dst *Unit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Unit.Merge(dst, src)
}
func (m *Unit) XXX_Size() int {
	return xxx_messageInfo_Unit.Size(m)
}
func (m *Unit) XXX_DiscardUnknown() {
	xxx_messageInfo_Unit.DiscardUnknown(m)
}

var xxx_messageInfo_Unit proto.InternalMessageInfo

func (m *Unit) GetDots() []*Cell {
	if m != nil {
		return m.Dots
	}
	return nil
}

func (m *Unit) GetPer() []*Cell {
	if m != nil {
		return m.Per
	}
	return nil
}

type Cell struct {
	Exponent int32       `protobuf:"varint,1,opt,name=exponent,proto3" json:"exponent,omitempty"`
	Prefix   *CellPrefix `protobuf:"bytes,2,opt,name=prefix,proto3" json:"prefix,omitempty"`
	// Types that are valid to be assigned to Unit:
	//	*Cell_Currency
	//	*Cell_Atom
	//	*Cell_Symbol
	Unit                 isCell_Unit `protobuf_oneof:"unit"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Cell) Reset()         { *m = Cell{} }
func (m *Cell) String() string { return proto.CompactTextString(m) }
func (*Cell) ProtoMessage()    {}
func (*Cell) Descriptor() ([]byte, []int) {
	return fileDescriptor_units_3e60ab24617b7349, []int{1}
}
func (m *Cell) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Cell.Unmarshal(m, b)
}
func (m *Cell) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Cell.Marshal(b, m, deterministic)
}
func (dst *Cell) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Cell.Merge(dst, src)
}
func (m *Cell) XXX_Size() int {
	return xxx_messageInfo_Cell.Size(m)
}
func (m *Cell) XXX_DiscardUnknown() {
	xxx_messageInfo_Cell.DiscardUnknown(m)
}

var xxx_messageInfo_Cell proto.InternalMessageInfo

type isCell_Unit interface {
	isCell_Unit()
}

type Cell_Currency struct {
	Currency *CurrencyUnit `protobuf:"bytes,3,opt,name=currency,proto3,oneof"`
}
type Cell_Atom struct {
	Atom *AtomUnit `protobuf:"bytes,4,opt,name=atom,proto3,oneof"`
}
type Cell_Symbol struct {
	Symbol string `protobuf:"bytes,5,opt,name=symbol,proto3,oneof"`
}

func (*Cell_Currency) isCell_Unit() {}
func (*Cell_Atom) isCell_Unit()     {}
func (*Cell_Symbol) isCell_Unit()   {}

func (m *Cell) GetUnit() isCell_Unit {
	if m != nil {
		return m.Unit
	}
	return nil
}

func (m *Cell) GetExponent() int32 {
	if m != nil {
		return m.Exponent
	}
	return 0
}

func (m *Cell) GetPrefix() *CellPrefix {
	if m != nil {
		return m.Prefix
	}
	return nil
}

func (m *Cell) GetCurrency() *CurrencyUnit {
	if x, ok := m.GetUnit().(*Cell_Currency); ok {
		return x.Currency
	}
	return nil
}

func (m *Cell) GetAtom() *AtomUnit {
	if x, ok := m.GetUnit().(*Cell_Atom); ok {
		return x.Atom
	}
	return nil
}

func (m *Cell) GetSymbol() string {
	if x, ok := m.GetUnit().(*Cell_Symbol); ok {
		return x.Symbol
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Cell) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Cell_OneofMarshaler, _Cell_OneofUnmarshaler, _Cell_OneofSizer, []interface{}{
		(*Cell_Currency)(nil),
		(*Cell_Atom)(nil),
		(*Cell_Symbol)(nil),
	}
}

func _Cell_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Cell)
	// unit
	switch x := m.Unit.(type) {
	case *Cell_Currency:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Currency); err != nil {
			return err
		}
	case *Cell_Atom:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Atom); err != nil {
			return err
		}
	case *Cell_Symbol:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Symbol)
	case nil:
	default:
		return fmt.Errorf("Cell.Unit has unexpected type %T", x)
	}
	return nil
}

func _Cell_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Cell)
	switch tag {
	case 3: // unit.currency
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CurrencyUnit)
		err := b.DecodeMessage(msg)
		m.Unit = &Cell_Currency{msg}
		return true, err
	case 4: // unit.atom
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AtomUnit)
		err := b.DecodeMessage(msg)
		m.Unit = &Cell_Atom{msg}
		return true, err
	case 5: // unit.symbol
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Unit = &Cell_Symbol{x}
		return true, err
	default:
		return false, nil
	}
}

func _Cell_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Cell)
	// unit
	switch x := m.Unit.(type) {
	case *Cell_Currency:
		s := proto.Size(x.Currency)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Cell_Atom:
		s := proto.Size(x.Atom)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Cell_Symbol:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.Symbol)))
		n += len(x.Symbol)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type CellPrefix struct {
	Is                   PrefixV1            `protobuf:"varint,1,opt,name=is,proto3,enum=units.PrefixV1" json:"is,omitempty"`
	Type                 CellPrefix_ShowType `protobuf:"varint,2,opt,name=type,proto3,enum=units.CellPrefix_ShowType" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *CellPrefix) Reset()         { *m = CellPrefix{} }
func (m *CellPrefix) String() string { return proto.CompactTextString(m) }
func (*CellPrefix) ProtoMessage()    {}
func (*CellPrefix) Descriptor() ([]byte, []int) {
	return fileDescriptor_units_3e60ab24617b7349, []int{2}
}
func (m *CellPrefix) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CellPrefix.Unmarshal(m, b)
}
func (m *CellPrefix) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CellPrefix.Marshal(b, m, deterministic)
}
func (dst *CellPrefix) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CellPrefix.Merge(dst, src)
}
func (m *CellPrefix) XXX_Size() int {
	return xxx_messageInfo_CellPrefix.Size(m)
}
func (m *CellPrefix) XXX_DiscardUnknown() {
	xxx_messageInfo_CellPrefix.DiscardUnknown(m)
}

var xxx_messageInfo_CellPrefix proto.InternalMessageInfo

func (m *CellPrefix) GetIs() PrefixV1 {
	if m != nil {
		return m.Is
	}
	return PrefixV1_noPrefix
}

func (m *CellPrefix) GetType() CellPrefix_ShowType {
	if m != nil {
		return m.Type
	}
	return CellPrefix_symbol
}

type CurrencyUnit struct {
	Is                   CurrencyV1            `protobuf:"varint,1,opt,name=is,proto3,enum=units.CurrencyV1" json:"is,omitempty"`
	Type                 CurrencyUnit_ShowType `protobuf:"varint,2,opt,name=type,proto3,enum=units.CurrencyUnit_ShowType" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *CurrencyUnit) Reset()         { *m = CurrencyUnit{} }
func (m *CurrencyUnit) String() string { return proto.CompactTextString(m) }
func (*CurrencyUnit) ProtoMessage()    {}
func (*CurrencyUnit) Descriptor() ([]byte, []int) {
	return fileDescriptor_units_3e60ab24617b7349, []int{3}
}
func (m *CurrencyUnit) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CurrencyUnit.Unmarshal(m, b)
}
func (m *CurrencyUnit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CurrencyUnit.Marshal(b, m, deterministic)
}
func (dst *CurrencyUnit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CurrencyUnit.Merge(dst, src)
}
func (m *CurrencyUnit) XXX_Size() int {
	return xxx_messageInfo_CurrencyUnit.Size(m)
}
func (m *CurrencyUnit) XXX_DiscardUnknown() {
	xxx_messageInfo_CurrencyUnit.DiscardUnknown(m)
}

var xxx_messageInfo_CurrencyUnit proto.InternalMessageInfo

func (m *CurrencyUnit) GetIs() CurrencyV1 {
	if m != nil {
		return m.Is
	}
	return CurrencyV1_XXX
}

func (m *CurrencyUnit) GetType() CurrencyUnit_ShowType {
	if m != nil {
		return m.Type
	}
	return CurrencyUnit_code
}

type AtomUnit struct {
	Is                   AtomV1            `protobuf:"varint,1,opt,name=is,proto3,enum=units.AtomV1" json:"is,omitempty"`
	Type                 AtomUnit_ShowType `protobuf:"varint,2,opt,name=type,proto3,enum=units.AtomUnit_ShowType" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *AtomUnit) Reset()         { *m = AtomUnit{} }
func (m *AtomUnit) String() string { return proto.CompactTextString(m) }
func (*AtomUnit) ProtoMessage()    {}
func (*AtomUnit) Descriptor() ([]byte, []int) {
	return fileDescriptor_units_3e60ab24617b7349, []int{4}
}
func (m *AtomUnit) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AtomUnit.Unmarshal(m, b)
}
func (m *AtomUnit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AtomUnit.Marshal(b, m, deterministic)
}
func (dst *AtomUnit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AtomUnit.Merge(dst, src)
}
func (m *AtomUnit) XXX_Size() int {
	return xxx_messageInfo_AtomUnit.Size(m)
}
func (m *AtomUnit) XXX_DiscardUnknown() {
	xxx_messageInfo_AtomUnit.DiscardUnknown(m)
}

var xxx_messageInfo_AtomUnit proto.InternalMessageInfo

func (m *AtomUnit) GetIs() AtomV1 {
	if m != nil {
		return m.Is
	}
	return AtomV1_noAtom
}

func (m *AtomUnit) GetType() AtomUnit_ShowType {
	if m != nil {
		return m.Type
	}
	return AtomUnit_symbol
}

var E_Unit = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.FieldOptions)(nil),
	ExtensionType: (*Unit)(nil),
	Field:         919111,
	Name:          "units.unit",
	Tag:           "bytes,919111,opt,name=unit",
	Filename:      "protos/units/units.proto",
}

func init() {
	proto.RegisterType((*Unit)(nil), "units.Unit")
	proto.RegisterType((*Cell)(nil), "units.Cell")
	proto.RegisterType((*CellPrefix)(nil), "units.CellPrefix")
	proto.RegisterType((*CurrencyUnit)(nil), "units.CurrencyUnit")
	proto.RegisterType((*AtomUnit)(nil), "units.AtomUnit")
	proto.RegisterEnum("units.CellPrefix_ShowType", CellPrefix_ShowType_name, CellPrefix_ShowType_value)
	proto.RegisterEnum("units.CurrencyUnit_ShowType", CurrencyUnit_ShowType_name, CurrencyUnit_ShowType_value)
	proto.RegisterEnum("units.AtomUnit_ShowType", AtomUnit_ShowType_name, AtomUnit_ShowType_value)
	proto.RegisterExtension(E_Unit)
}

func init() { proto.RegisterFile("protos/units/units.proto", fileDescriptor_units_3e60ab24617b7349) }

var fileDescriptor_units_3e60ab24617b7349 = []byte{
	// 508 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x93, 0xcf, 0x8e, 0xd3, 0x3c,
	0x14, 0xc5, 0x27, 0x6d, 0x5a, 0x65, 0xee, 0xcc, 0x37, 0x5f, 0xc7, 0x2c, 0x30, 0x85, 0x11, 0x25,
	0x12, 0xd2, 0x80, 0x68, 0xc2, 0x14, 0x16, 0x08, 0x36, 0x30, 0x48, 0x23, 0x76, 0xa0, 0xf0, 0x67,
	0xc1, 0x2e, 0x4d, 0x3c, 0x19, 0x8b, 0x24, 0xb6, 0x1c, 0x47, 0xb4, 0x2b, 0x5e, 0x00, 0x89, 0x0d,
	0xef, 0x84, 0x78, 0x2b, 0x1c, 0xdb, 0x69, 0x93, 0x0e, 0x6c, 0x2a, 0xf9, 0x9c, 0x93, 0xdb, 0xdf,
	0xbd, 0xf6, 0x05, 0xcc, 0x05, 0x93, 0xac, 0x0a, 0xeb, 0x92, 0x4a, 0xfb, 0x1b, 0x68, 0x09, 0x8d,
	0xf4, 0x61, 0x3a, 0xcb, 0x18, 0xcb, 0x72, 0x12, 0x6a, 0x71, 0x59, 0x5f, 0x86, 0x29, 0xa9, 0x12,
	0x41, 0xb9, 0x64, 0xc2, 0x04, 0xa7, 0xb7, 0x7b, 0x25, 0x92, 0x5a, 0x08, 0x52, 0x26, 0x6b, 0x6b,
	0xde, 0xea, 0x99, 0x5c, 0x90, 0x4b, 0xba, 0xb2, 0xd6, 0xcd, 0x9e, 0x15, 0x4b, 0x56, 0x18, 0xc3,
	0xbf, 0x00, 0xf7, 0xa3, 0xd2, 0xd0, 0x5d, 0x70, 0x53, 0x26, 0x2b, 0xec, 0xcc, 0x86, 0xa7, 0x07,
	0x8b, 0x83, 0xc0, 0xd0, 0xbd, 0x26, 0x79, 0x1e, 0x69, 0x03, 0x9d, 0xc0, 0x90, 0x13, 0x81, 0x07,
	0xd7, 0xfd, 0x46, 0xf7, 0x7f, 0x3b, 0xe0, 0x36, 0x27, 0x34, 0x05, 0x8f, 0xac, 0x38, 0x2b, 0x49,
	0x29, 0x55, 0x31, 0xe7, 0x74, 0x14, 0x6d, 0xce, 0xe8, 0x01, 0x8c, 0x0d, 0x95, 0x2a, 0xe3, 0xa8,
	0x32, 0xc7, 0x9d, 0x32, 0xef, 0xb4, 0x11, 0xd9, 0x00, 0x3a, 0x03, 0xaf, 0xed, 0x0e, 0x0f, 0x75,
	0xf8, 0x46, 0x1b, 0xb6, 0x72, 0x83, 0xfd, 0x66, 0x2f, 0xda, 0xc4, 0xd0, 0x7d, 0x70, 0x9b, 0xc6,
	0xb0, 0xab, 0xe3, 0xff, 0xdb, 0xf8, 0x2b, 0x25, 0xd9, 0xa8, 0xb6, 0x11, 0x86, 0x71, 0xb5, 0x2e,
	0x96, 0x2c, 0xc7, 0x23, 0x15, 0xdc, 0x57, 0xba, 0x3d, 0x9f, 0x8f, 0xc1, 0x6d, 0xbe, 0xf1, 0xbf,
	0x01, 0x6c, 0x89, 0xd4, 0x64, 0x06, 0xb4, 0xd2, 0xad, 0x1c, 0x6d, 0x8a, 0x1a, 0xeb, 0xd3, 0x59,
	0xa4, 0x2c, 0x14, 0x80, 0x2b, 0xd7, 0x9c, 0xe8, 0x9e, 0x8e, 0x16, 0xd3, 0x6b, 0x3d, 0x05, 0xef,
	0xaf, 0xd8, 0xd7, 0x0f, 0x2a, 0x11, 0xe9, 0x9c, 0x3f, 0x03, 0xaf, 0x55, 0x10, 0xb4, 0x30, 0x93,
	0x3d, 0xe4, 0x81, 0x5b, 0xc6, 0x05, 0x99, 0x38, 0xfe, 0x0f, 0x07, 0x0e, 0xbb, 0x6d, 0xa2, 0x7b,
	0x1d, 0x86, 0xe3, 0x9d, 0x39, 0x58, 0x8a, 0xc7, 0x3d, 0x8a, 0x3b, 0x7f, 0x19, 0xd6, 0x2e, 0xc7,
	0xc3, 0x0e, 0x87, 0xfa, 0xef, 0x84, 0xa5, 0x44, 0x51, 0x6c, 0x89, 0x9c, 0x0d, 0xd1, 0xc0, 0xff,
	0xe9, 0x80, 0xd7, 0x4e, 0x52, 0x3d, 0x85, 0x2d, 0xcd, 0x7f, 0x9d, 0x31, 0x5b, 0x92, 0x47, 0x3d,
	0x12, 0xbc, 0x73, 0x0f, 0xbb, 0x14, 0x2f, 0xfe, 0x31, 0x8d, 0x43, 0xf0, 0x2a, 0x5a, 0x66, 0x75,
	0x1e, 0x0b, 0x45, 0xa2, 0x1c, 0x9e, 0xd7, 0x22, 0xce, 0x27, 0x03, 0xb4, 0x0f, 0x23, 0x1e, 0x8b,
	0x8a, 0x4c, 0x86, 0xcf, 0x5f, 0x9a, 0x1b, 0x43, 0x27, 0x81, 0xd9, 0x9c, 0xa0, 0xdd, 0x9c, 0xe0,
	0x82, 0x92, 0x3c, 0x7d, 0xcb, 0x25, 0x65, 0x65, 0x85, 0x7f, 0x7d, 0x7f, 0xa6, 0xdf, 0x44, 0xfb,
	0x6c, 0x1b, 0x8e, 0x48, 0x7f, 0x79, 0xfe, 0xf4, 0xf3, 0x22, 0xa3, 0xf2, 0xaa, 0x5e, 0x06, 0x09,
	0x2b, 0x42, 0x52, 0x70, 0xaa, 0xee, 0x8c, 0xad, 0xcc, 0x0a, 0x26, 0xf3, 0x8c, 0x94, 0xf3, 0x34,
	0x16, 0x72, 0x4e, 0x56, 0x32, 0xe4, 0x5f, 0x32, 0xb3, 0x40, 0xcb, 0xb1, 0xb6, 0x9f, 0xfc, 0x09,
	0x00, 0x00, 0xff, 0xff, 0xde, 0x8c, 0xc5, 0x5d, 0xd2, 0x03, 0x00, 0x00,
}
