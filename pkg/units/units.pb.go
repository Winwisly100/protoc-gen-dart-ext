// Code generated by protoc-gen-go. DO NOT EDIT.
// source: protos/units/units.proto

package units // import "github.com/empirefox/protoc-gen-dart-ext/pkg/units"

/*
https://physics.nist.gov/cuu/Units/units.html
*/

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import descriptor "github.com/golang/protobuf/protoc-gen-go/descriptor"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AtomType int32

const (
	AtomType_symbol AtomType = 0
	// plural Form.one
	AtomType_one AtomType = 1
	// plural Form.other
	AtomType_other AtomType = 2
	// parse Form from plural tool
	AtomType_parse AtomType = 3
)

var AtomType_name = map[int32]string{
	0: "symbol",
	1: "one",
	2: "other",
	3: "parse",
}
var AtomType_value = map[string]int32{
	"symbol": 0,
	"one":    1,
	"other":  2,
	"parse":  3,
}

func (x AtomType) String() string {
	return proto.EnumName(AtomType_name, int32(x))
}
func (AtomType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_units_9a92439f64979e96, []int{0}
}

type Unit_PrefixType int32

const (
	Unit_symbol Unit_PrefixType = 0
	Unit_name   Unit_PrefixType = 1
)

var Unit_PrefixType_name = map[int32]string{
	0: "symbol",
	1: "name",
}
var Unit_PrefixType_value = map[string]int32{
	"symbol": 0,
	"name":   1,
}

func (x Unit_PrefixType) String() string {
	return proto.EnumName(Unit_PrefixType_name, int32(x))
}
func (Unit_PrefixType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_units_9a92439f64979e96, []int{0, 0}
}

type Format_Builtin int32

const (
	Format_decimal        Format_Builtin = 0
	Format_percent        Format_Builtin = 1
	Format_scientific     Format_Builtin = 2
	Format_currency       Format_Builtin = 3
	Format_currencySimple Format_Builtin = 4
)

var Format_Builtin_name = map[int32]string{
	0: "decimal",
	1: "percent",
	2: "scientific",
	3: "currency",
	4: "currencySimple",
}
var Format_Builtin_value = map[string]int32{
	"decimal":        0,
	"percent":        1,
	"scientific":     2,
	"currency":       3,
	"currencySimple": 4,
}

func (x Format_Builtin) String() string {
	return proto.EnumName(Format_Builtin_name, int32(x))
}
func (Format_Builtin) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_units_9a92439f64979e96, []int{2, 0}
}

type Unit struct {
	// ISO 4217
	Currency *CurrencyUnit `protobuf:"bytes,1,opt,name=currency,proto3" json:"currency,omitempty"`
	// decimalLeft affects both Currency and Atom
	// only valid for int type
	// move decimal point left when showing
	// move decimal point right back when saving
	// need promise the visible fractional digits when showing
	DecimalLeft          int32           `protobuf:"varint,2,opt,name=decimalLeft,proto3" json:"decimalLeft,omitempty"`
	Prefix               Unit_PrefixType `protobuf:"varint,3,opt,name=prefix,proto3,enum=units.Unit_PrefixType" json:"prefix,omitempty"`
	Atom                 AtomType        `protobuf:"varint,4,opt,name=atom,proto3,enum=units.AtomType" json:"atom,omitempty"`
	Format               *Format         `protobuf:"bytes,5,opt,name=format,proto3" json:"format,omitempty"`
	Ordinal              bool            `protobuf:"varint,6,opt,name=ordinal,proto3" json:"ordinal,omitempty"`
	Dots                 []*Cell         `protobuf:"bytes,7,rep,name=dots,proto3" json:"dots,omitempty"`
	Per                  []*Cell         `protobuf:"bytes,8,rep,name=per,proto3" json:"per,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Unit) Reset()         { *m = Unit{} }
func (m *Unit) String() string { return proto.CompactTextString(m) }
func (*Unit) ProtoMessage()    {}
func (*Unit) Descriptor() ([]byte, []int) {
	return fileDescriptor_units_9a92439f64979e96, []int{0}
}
func (m *Unit) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Unit.Unmarshal(m, b)
}
func (m *Unit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Unit.Marshal(b, m, deterministic)
}
func (dst *Unit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Unit.Merge(dst, src)
}
func (m *Unit) XXX_Size() int {
	return xxx_messageInfo_Unit.Size(m)
}
func (m *Unit) XXX_DiscardUnknown() {
	xxx_messageInfo_Unit.DiscardUnknown(m)
}

var xxx_messageInfo_Unit proto.InternalMessageInfo

func (m *Unit) GetCurrency() *CurrencyUnit {
	if m != nil {
		return m.Currency
	}
	return nil
}

func (m *Unit) GetDecimalLeft() int32 {
	if m != nil {
		return m.DecimalLeft
	}
	return 0
}

func (m *Unit) GetPrefix() Unit_PrefixType {
	if m != nil {
		return m.Prefix
	}
	return Unit_symbol
}

func (m *Unit) GetAtom() AtomType {
	if m != nil {
		return m.Atom
	}
	return AtomType_symbol
}

func (m *Unit) GetFormat() *Format {
	if m != nil {
		return m.Format
	}
	return nil
}

func (m *Unit) GetOrdinal() bool {
	if m != nil {
		return m.Ordinal
	}
	return false
}

func (m *Unit) GetDots() []*Cell {
	if m != nil {
		return m.Dots
	}
	return nil
}

func (m *Unit) GetPer() []*Cell {
	if m != nil {
		return m.Per
	}
	return nil
}

type CurrencyUnit struct {
	// Types that are valid to be assigned to Type:
	//	*CurrencyUnit_Code
	//	*CurrencyUnit_Symbol
	//	*CurrencyUnit_Name
	Type                 isCurrencyUnit_Type `protobuf_oneof:"type"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *CurrencyUnit) Reset()         { *m = CurrencyUnit{} }
func (m *CurrencyUnit) String() string { return proto.CompactTextString(m) }
func (*CurrencyUnit) ProtoMessage()    {}
func (*CurrencyUnit) Descriptor() ([]byte, []int) {
	return fileDescriptor_units_9a92439f64979e96, []int{1}
}
func (m *CurrencyUnit) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CurrencyUnit.Unmarshal(m, b)
}
func (m *CurrencyUnit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CurrencyUnit.Marshal(b, m, deterministic)
}
func (dst *CurrencyUnit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CurrencyUnit.Merge(dst, src)
}
func (m *CurrencyUnit) XXX_Size() int {
	return xxx_messageInfo_CurrencyUnit.Size(m)
}
func (m *CurrencyUnit) XXX_DiscardUnknown() {
	xxx_messageInfo_CurrencyUnit.DiscardUnknown(m)
}

var xxx_messageInfo_CurrencyUnit proto.InternalMessageInfo

type isCurrencyUnit_Type interface {
	isCurrencyUnit_Type()
}

type CurrencyUnit_Code struct {
	Code CurrencyV1 `protobuf:"varint,1,opt,name=code,proto3,enum=units.CurrencyV1,oneof"`
}
type CurrencyUnit_Symbol struct {
	Symbol CurrencyV1 `protobuf:"varint,2,opt,name=symbol,proto3,enum=units.CurrencyV1,oneof"`
}
type CurrencyUnit_Name struct {
	Name CurrencyV1 `protobuf:"varint,3,opt,name=name,proto3,enum=units.CurrencyV1,oneof"`
}

func (*CurrencyUnit_Code) isCurrencyUnit_Type()   {}
func (*CurrencyUnit_Symbol) isCurrencyUnit_Type() {}
func (*CurrencyUnit_Name) isCurrencyUnit_Type()   {}

func (m *CurrencyUnit) GetType() isCurrencyUnit_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *CurrencyUnit) GetCode() CurrencyV1 {
	if x, ok := m.GetType().(*CurrencyUnit_Code); ok {
		return x.Code
	}
	return CurrencyV1_XXX
}

func (m *CurrencyUnit) GetSymbol() CurrencyV1 {
	if x, ok := m.GetType().(*CurrencyUnit_Symbol); ok {
		return x.Symbol
	}
	return CurrencyV1_XXX
}

func (m *CurrencyUnit) GetName() CurrencyV1 {
	if x, ok := m.GetType().(*CurrencyUnit_Name); ok {
		return x.Name
	}
	return CurrencyV1_XXX
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*CurrencyUnit) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _CurrencyUnit_OneofMarshaler, _CurrencyUnit_OneofUnmarshaler, _CurrencyUnit_OneofSizer, []interface{}{
		(*CurrencyUnit_Code)(nil),
		(*CurrencyUnit_Symbol)(nil),
		(*CurrencyUnit_Name)(nil),
	}
}

func _CurrencyUnit_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*CurrencyUnit)
	// type
	switch x := m.Type.(type) {
	case *CurrencyUnit_Code:
		b.EncodeVarint(1<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.Code))
	case *CurrencyUnit_Symbol:
		b.EncodeVarint(2<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.Symbol))
	case *CurrencyUnit_Name:
		b.EncodeVarint(3<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.Name))
	case nil:
	default:
		return fmt.Errorf("CurrencyUnit.Type has unexpected type %T", x)
	}
	return nil
}

func _CurrencyUnit_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*CurrencyUnit)
	switch tag {
	case 1: // type.code
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Type = &CurrencyUnit_Code{CurrencyV1(x)}
		return true, err
	case 2: // type.symbol
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Type = &CurrencyUnit_Symbol{CurrencyV1(x)}
		return true, err
	case 3: // type.name
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Type = &CurrencyUnit_Name{CurrencyV1(x)}
		return true, err
	default:
		return false, nil
	}
}

func _CurrencyUnit_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*CurrencyUnit)
	// type
	switch x := m.Type.(type) {
	case *CurrencyUnit_Code:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(x.Code))
	case *CurrencyUnit_Symbol:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(x.Symbol))
	case *CurrencyUnit_Name:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(x.Name))
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Format struct {
	Locale string `protobuf:"bytes,2,opt,name=locale,proto3" json:"locale,omitempty"`
	// Types that are valid to be assigned to Type:
	//	*Format_Builtin_
	//	*Format_Imported
	//	*Format_Custom
	Type                 isFormat_Type `protobuf_oneof:"type"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Format) Reset()         { *m = Format{} }
func (m *Format) String() string { return proto.CompactTextString(m) }
func (*Format) ProtoMessage()    {}
func (*Format) Descriptor() ([]byte, []int) {
	return fileDescriptor_units_9a92439f64979e96, []int{2}
}
func (m *Format) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Format.Unmarshal(m, b)
}
func (m *Format) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Format.Marshal(b, m, deterministic)
}
func (dst *Format) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Format.Merge(dst, src)
}
func (m *Format) XXX_Size() int {
	return xxx_messageInfo_Format.Size(m)
}
func (m *Format) XXX_DiscardUnknown() {
	xxx_messageInfo_Format.DiscardUnknown(m)
}

var xxx_messageInfo_Format proto.InternalMessageInfo

type isFormat_Type interface {
	isFormat_Type()
}

type Format_Builtin_ struct {
	Builtin Format_Builtin `protobuf:"varint,3,opt,name=builtin,proto3,enum=units.Format_Builtin,oneof"`
}
type Format_Imported struct {
	Imported string `protobuf:"bytes,4,opt,name=imported,proto3,oneof"`
}
type Format_Custom struct {
	Custom string `protobuf:"bytes,5,opt,name=custom,proto3,oneof"`
}

func (*Format_Builtin_) isFormat_Type() {}
func (*Format_Imported) isFormat_Type() {}
func (*Format_Custom) isFormat_Type()   {}

func (m *Format) GetType() isFormat_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *Format) GetLocale() string {
	if m != nil {
		return m.Locale
	}
	return ""
}

func (m *Format) GetBuiltin() Format_Builtin {
	if x, ok := m.GetType().(*Format_Builtin_); ok {
		return x.Builtin
	}
	return Format_decimal
}

func (m *Format) GetImported() string {
	if x, ok := m.GetType().(*Format_Imported); ok {
		return x.Imported
	}
	return ""
}

func (m *Format) GetCustom() string {
	if x, ok := m.GetType().(*Format_Custom); ok {
		return x.Custom
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Format) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Format_OneofMarshaler, _Format_OneofUnmarshaler, _Format_OneofSizer, []interface{}{
		(*Format_Builtin_)(nil),
		(*Format_Imported)(nil),
		(*Format_Custom)(nil),
	}
}

func _Format_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Format)
	// type
	switch x := m.Type.(type) {
	case *Format_Builtin_:
		b.EncodeVarint(3<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.Builtin))
	case *Format_Imported:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Imported)
	case *Format_Custom:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Custom)
	case nil:
	default:
		return fmt.Errorf("Format.Type has unexpected type %T", x)
	}
	return nil
}

func _Format_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Format)
	switch tag {
	case 3: // type.builtin
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Type = &Format_Builtin_{Format_Builtin(x)}
		return true, err
	case 4: // type.imported
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Type = &Format_Imported{x}
		return true, err
	case 5: // type.custom
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Type = &Format_Custom{x}
		return true, err
	default:
		return false, nil
	}
}

func _Format_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Format)
	// type
	switch x := m.Type.(type) {
	case *Format_Builtin_:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(x.Builtin))
	case *Format_Imported:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.Imported)))
		n += len(x.Imported)
	case *Format_Custom:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.Custom)))
		n += len(x.Custom)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Cell struct {
	Exponent int32    `protobuf:"varint,1,opt,name=exponent,proto3" json:"exponent,omitempty"`
	Prefix   PrefixV1 `protobuf:"varint,2,opt,name=prefix,proto3,enum=units.PrefixV1" json:"prefix,omitempty"`
	// Types that are valid to be assigned to Unit:
	//	*Cell_Atom
	//	*Cell_Symbol
	Unit                 isCell_Unit `protobuf_oneof:"unit"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Cell) Reset()         { *m = Cell{} }
func (m *Cell) String() string { return proto.CompactTextString(m) }
func (*Cell) ProtoMessage()    {}
func (*Cell) Descriptor() ([]byte, []int) {
	return fileDescriptor_units_9a92439f64979e96, []int{3}
}
func (m *Cell) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Cell.Unmarshal(m, b)
}
func (m *Cell) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Cell.Marshal(b, m, deterministic)
}
func (dst *Cell) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Cell.Merge(dst, src)
}
func (m *Cell) XXX_Size() int {
	return xxx_messageInfo_Cell.Size(m)
}
func (m *Cell) XXX_DiscardUnknown() {
	xxx_messageInfo_Cell.DiscardUnknown(m)
}

var xxx_messageInfo_Cell proto.InternalMessageInfo

type isCell_Unit interface {
	isCell_Unit()
}

type Cell_Atom struct {
	Atom AtomV1 `protobuf:"varint,3,opt,name=atom,proto3,enum=units.AtomV1,oneof"`
}
type Cell_Symbol struct {
	Symbol string `protobuf:"bytes,4,opt,name=symbol,proto3,oneof"`
}

func (*Cell_Atom) isCell_Unit()   {}
func (*Cell_Symbol) isCell_Unit() {}

func (m *Cell) GetUnit() isCell_Unit {
	if m != nil {
		return m.Unit
	}
	return nil
}

func (m *Cell) GetExponent() int32 {
	if m != nil {
		return m.Exponent
	}
	return 0
}

func (m *Cell) GetPrefix() PrefixV1 {
	if m != nil {
		return m.Prefix
	}
	return PrefixV1_noPrefix
}

func (m *Cell) GetAtom() AtomV1 {
	if x, ok := m.GetUnit().(*Cell_Atom); ok {
		return x.Atom
	}
	return AtomV1_noAtom
}

func (m *Cell) GetSymbol() string {
	if x, ok := m.GetUnit().(*Cell_Symbol); ok {
		return x.Symbol
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Cell) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Cell_OneofMarshaler, _Cell_OneofUnmarshaler, _Cell_OneofSizer, []interface{}{
		(*Cell_Atom)(nil),
		(*Cell_Symbol)(nil),
	}
}

func _Cell_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Cell)
	// unit
	switch x := m.Unit.(type) {
	case *Cell_Atom:
		b.EncodeVarint(3<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.Atom))
	case *Cell_Symbol:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Symbol)
	case nil:
	default:
		return fmt.Errorf("Cell.Unit has unexpected type %T", x)
	}
	return nil
}

func _Cell_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Cell)
	switch tag {
	case 3: // unit.atom
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Unit = &Cell_Atom{AtomV1(x)}
		return true, err
	case 4: // unit.symbol
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Unit = &Cell_Symbol{x}
		return true, err
	default:
		return false, nil
	}
}

func _Cell_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Cell)
	// unit
	switch x := m.Unit.(type) {
	case *Cell_Atom:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(x.Atom))
	case *Cell_Symbol:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.Symbol)))
		n += len(x.Symbol)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

var E_Unit = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.FieldOptions)(nil),
	ExtensionType: (*Unit)(nil),
	Field:         919111,
	Name:          "units.unit",
	Tag:           "bytes,919111,opt,name=unit",
	Filename:      "protos/units/units.proto",
}

func init() {
	proto.RegisterType((*Unit)(nil), "units.Unit")
	proto.RegisterType((*CurrencyUnit)(nil), "units.CurrencyUnit")
	proto.RegisterType((*Format)(nil), "units.Format")
	proto.RegisterType((*Cell)(nil), "units.Cell")
	proto.RegisterEnum("units.AtomType", AtomType_name, AtomType_value)
	proto.RegisterEnum("units.Unit_PrefixType", Unit_PrefixType_name, Unit_PrefixType_value)
	proto.RegisterEnum("units.Format_Builtin", Format_Builtin_name, Format_Builtin_value)
	proto.RegisterExtension(E_Unit)
}

func init() { proto.RegisterFile("protos/units/units.proto", fileDescriptor_units_9a92439f64979e96) }

var fileDescriptor_units_9a92439f64979e96 = []byte{
	// 640 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x54, 0xd1, 0x6e, 0xd3, 0x3c,
	0x14, 0x5e, 0xda, 0x34, 0xcd, 0x4e, 0xb7, 0xfe, 0xf9, 0x8d, 0x18, 0x66, 0x30, 0x51, 0x15, 0x21,
	0x10, 0x68, 0x89, 0x56, 0x40, 0x42, 0x5c, 0xc1, 0x90, 0x26, 0x2e, 0x90, 0x40, 0x81, 0xed, 0x82,
	0xbb, 0xd4, 0x71, 0x3b, 0x8b, 0x24, 0x8e, 0x1c, 0x47, 0x6a, 0xdf, 0x81, 0x2b, 0x24, 0x9e, 0x89,
	0x07, 0xe0, 0x2d, 0x78, 0x0a, 0x1c, 0xdb, 0xe9, 0x1a, 0x06, 0x37, 0x55, 0xcf, 0xf9, 0x3e, 0x7f,
	0x3e, 0xe7, 0x3b, 0x27, 0x06, 0x5c, 0x0a, 0x2e, 0x79, 0x15, 0xd5, 0x05, 0x93, 0xf6, 0x37, 0xd4,
	0x29, 0x34, 0xd0, 0xc1, 0xe1, 0x64, 0xc9, 0xf9, 0x32, 0xa3, 0x91, 0x4e, 0xce, 0xeb, 0x45, 0x94,
	0xd2, 0x8a, 0x08, 0x56, 0x4a, 0x2e, 0x0c, 0xf1, 0xf0, 0x4e, 0x47, 0x82, 0xd4, 0x42, 0xd0, 0x82,
	0xac, 0x2d, 0x78, 0xbb, 0x03, 0x96, 0x82, 0x2e, 0xd8, 0xca, 0x42, 0xb7, 0x3a, 0x50, 0x22, 0x79,
	0x6e, 0x80, 0xe9, 0xcf, 0x1e, 0xb8, 0xe7, 0x2a, 0x89, 0x22, 0xf0, 0x5b, 0x39, 0xec, 0x4c, 0x9c,
	0x47, 0xa3, 0xd9, 0x8d, 0xd0, 0x94, 0xf8, 0xc6, 0xa6, 0x1b, 0x5a, 0xbc, 0x21, 0xa1, 0x09, 0x8c,
	0x52, 0x4a, 0x58, 0x9e, 0x64, 0xef, 0xe8, 0x42, 0xe2, 0x9e, 0x3a, 0x33, 0x88, 0xb7, 0x53, 0x28,
	0x04, 0xcf, 0x14, 0x81, 0xfb, 0x0a, 0x1c, 0xcf, 0x0e, 0xac, 0x60, 0x23, 0x14, 0x7e, 0xd0, 0xc8,
	0xa7, 0x75, 0x49, 0x63, 0xcb, 0x42, 0xf7, 0xc1, 0x6d, 0x2a, 0xc3, 0xae, 0x66, 0xff, 0x67, 0xd9,
	0xaf, 0x55, 0x4a, 0xd3, 0x34, 0x88, 0x1e, 0x80, 0xb7, 0xe0, 0x22, 0x4f, 0x24, 0x1e, 0xe8, 0x2a,
	0xf7, 0x2d, 0xed, 0x4c, 0x27, 0x63, 0x0b, 0x22, 0x0c, 0x43, 0x2e, 0x52, 0x56, 0x24, 0x19, 0xf6,
	0x14, 0xcf, 0x8f, 0xdb, 0x10, 0xdd, 0x03, 0x37, 0xe5, 0xb2, 0xc2, 0xc3, 0x49, 0x5f, 0x1d, 0x1f,
	0xb5, 0x4d, 0xd2, 0x2c, 0x8b, 0x35, 0x80, 0x8e, 0xa0, 0x5f, 0x52, 0x81, 0xfd, 0xeb, 0x78, 0x93,
	0x9f, 0x4e, 0x01, 0xae, 0x6a, 0x47, 0x00, 0x5e, 0xb5, 0xce, 0xe7, 0x3c, 0x0b, 0x76, 0x90, 0x0f,
	0x6e, 0x91, 0xe4, 0x34, 0x70, 0xa6, 0xdf, 0x1d, 0xd8, 0xdb, 0xb6, 0x0d, 0x3d, 0x04, 0x97, 0xf0,
	0x94, 0x6a, 0x67, 0xc7, 0xb3, 0xff, 0xff, 0x70, 0xf6, 0xe2, 0xe4, 0xed, 0x4e, 0xac, 0x09, 0xe8,
	0x49, 0xab, 0xa7, 0x0d, 0xfd, 0x07, 0xd5, 0x52, 0x1a, 0xd5, 0xe6, 0x42, 0x6b, 0xef, 0xdf, 0x55,
	0x1b, 0xc2, 0xa9, 0x07, 0xae, 0x54, 0xd5, 0x4e, 0x7f, 0x39, 0xe0, 0x19, 0xa3, 0xd0, 0x01, 0x78,
	0x19, 0x27, 0x49, 0x46, 0xf5, 0x45, 0xbb, 0xb1, 0x8d, 0xd0, 0x09, 0x0c, 0xe7, 0x35, 0xcb, 0x24,
	0x2b, 0xac, 0xec, 0xcd, 0x8e, 0xc1, 0xe1, 0xa9, 0x01, 0x95, 0x74, 0xcb, 0x43, 0x77, 0xc1, 0x67,
	0x79, 0xc9, 0x85, 0xa4, 0xa9, 0x9e, 0xdd, 0xae, 0x02, 0x37, 0x19, 0x35, 0x09, 0x8f, 0xd4, 0x55,
	0x33, 0xd7, 0x81, 0xc5, 0x6c, 0x3c, 0x3d, 0x87, 0xa1, 0x55, 0x43, 0x23, 0x18, 0xda, 0xcd, 0x51,
	0x3e, 0xaa, 0x40, 0x19, 0x4d, 0x68, 0x21, 0x03, 0x07, 0x8d, 0x01, 0x2a, 0xc2, 0xd4, 0x7f, 0xb6,
	0x60, 0x24, 0xe8, 0xa1, 0xbd, 0xab, 0x3d, 0x0d, 0xfa, 0x08, 0xc1, 0xb8, 0x8d, 0x3e, 0xaa, 0x1b,
	0x33, 0x1a, 0xb8, 0x9b, 0x66, 0xbf, 0x39, 0xe0, 0x36, 0x63, 0x43, 0x87, 0xe0, 0xd3, 0x55, 0xc9,
	0x0b, 0x25, 0xa2, 0x07, 0x30, 0x88, 0x37, 0xb1, 0xb2, 0xb0, 0xdd, 0xd1, 0x5e, 0x67, 0xeb, 0xcc,
	0x88, 0x2f, 0x4e, 0xae, 0x2d, 0xa7, 0x31, 0x65, 0x7f, 0x6b, 0x39, 0x8d, 0xcf, 0x7a, 0x39, 0xf1,
	0x66, 0x7a, 0xad, 0x0f, 0x36, 0x6e, 0x8a, 0x6a, 0x4e, 0x3c, 0x7e, 0x0e, 0x7e, 0xbb, 0xd0, 0x9d,
	0xdd, 0x19, 0x42, 0x5f, 0x15, 0xa4, 0xfa, 0xdd, 0x85, 0x01, 0x97, 0x97, 0x54, 0xa8, 0x56, 0xd5,
	0xdf, 0x32, 0x11, 0x15, 0x0d, 0xfa, 0x2f, 0x5f, 0x99, 0xe3, 0xe8, 0x28, 0x34, 0x4f, 0x44, 0xd8,
	0x3e, 0x11, 0xe1, 0x19, 0xa3, 0x59, 0xfa, 0xbe, 0x94, 0x8c, 0x17, 0x15, 0xfe, 0xf1, 0xf5, 0x85,
	0xfe, 0x28, 0x46, 0x5b, 0x5f, 0x5a, 0xac, 0x4f, 0x9e, 0x3e, 0xfb, 0x3c, 0x5b, 0x32, 0x79, 0x59,
	0xcf, 0x43, 0xc2, 0xf3, 0x88, 0xe6, 0x25, 0x53, 0x7d, 0xf1, 0x95, 0x79, 0x6b, 0xc8, 0xf1, 0x92,
	0x16, 0xc7, 0x69, 0x22, 0xe4, 0x31, 0x5d, 0xc9, 0xa8, 0xfc, 0xb2, 0x34, 0x2f, 0xc5, 0xdc, 0xd3,
	0xf0, 0xd3, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xd9, 0x09, 0x40, 0x8d, 0xbb, 0x04, 0x00, 0x00,
}
