// DO NOT EDIT. Generated by protoc-gen-dart-ext/tools.

import './units.l10n.dart';

abstract class _Valuer {
  String of(UnitsLocalization l, bool p);
}

class _NoAtom implements _Valuer {
  const _NoAtom();
  String of(UnitsLocalization l, bool p) => '';
}

class _Meter implements _Valuer {
  const _Meter();
  String of(UnitsLocalization l, bool p) => p ? l.atomMeters : l.atomMeter;
}

class _Foot implements _Valuer {
  const _Foot();
  String of(UnitsLocalization l, bool p) => p ? l.atomFeet : l.atomFoot;
}

class _Inch implements _Valuer {
  const _Inch();
  String of(UnitsLocalization l, bool p) => p ? l.atomInches : l.atomInch;
}

class _Yard implements _Valuer {
  const _Yard();
  String of(UnitsLocalization l, bool p) => p ? l.atomYards : l.atomYard;
}

class _Mile implements _Valuer {
  const _Mile();
  String of(UnitsLocalization l, bool p) => p ? l.atomMiles : l.atomMile;
}

class _NauticalMile implements _Valuer {
  const _NauticalMile();
  String of(UnitsLocalization l, bool p) =>
      p ? l.atomNauticalMiles : l.atomNauticalMile;
}

class _LightYear implements _Valuer {
  const _LightYear();
  String of(UnitsLocalization l, bool p) =>
      p ? l.atomLightYears : l.atomLightYear;
}

class _Hectare implements _Valuer {
  const _Hectare();
  String of(UnitsLocalization l, bool p) => p ? l.atomHectares : l.atomHectare;
}

class _Are implements _Valuer {
  const _Are();
  String of(UnitsLocalization l, bool p) => p ? l.atomAres : l.atomAre;
}

class _Liter implements _Valuer {
  const _Liter();
  String of(UnitsLocalization l, bool p) => p ? l.atomLiters : l.atomLiter;
}

class _Gallon implements _Valuer {
  const _Gallon();
  String of(UnitsLocalization l, bool p) => p ? l.atomGallons : l.atomGallon;
}

class _Barrel implements _Valuer {
  const _Barrel();
  String of(UnitsLocalization l, bool p) => p ? l.atomBarrels : l.atomBarrel;
}

class _Gram implements _Valuer {
  const _Gram();
  String of(UnitsLocalization l, bool p) => p ? l.atomGrams : l.atomGram;
}

class _Ton implements _Valuer {
  const _Ton();
  String of(UnitsLocalization l, bool p) => p ? l.atomTons : l.atomTon;
}

class _Pound implements _Valuer {
  const _Pound();
  String of(UnitsLocalization l, bool p) => p ? l.atomPounds : l.atomPound;
}

class _Ounce implements _Valuer {
  const _Ounce();
  String of(UnitsLocalization l, bool p) => p ? l.atomOunces : l.atomOunce;
}

class _Second implements _Valuer {
  const _Second();
  String of(UnitsLocalization l, bool p) => p ? l.atomSeconds : l.atomSecond;
}

class _Minute implements _Valuer {
  const _Minute();
  String of(UnitsLocalization l, bool p) => p ? l.atomMinutes : l.atomMinute;
}

class _Hour implements _Valuer {
  const _Hour();
  String of(UnitsLocalization l, bool p) => p ? l.atomHours : l.atomHour;
}

class _Day implements _Valuer {
  const _Day();
  String of(UnitsLocalization l, bool p) => p ? l.atomDays : l.atomDay;
}

class _Week implements _Valuer {
  const _Week();
  String of(UnitsLocalization l, bool p) => p ? l.atomWeeks : l.atomWeek;
}

class _Month implements _Valuer {
  const _Month();
  String of(UnitsLocalization l, bool p) => p ? l.atomMonths : l.atomMonth;
}

class _Year implements _Valuer {
  const _Year();
  String of(UnitsLocalization l, bool p) => p ? l.atomYears : l.atomYear;
}

class _Century implements _Valuer {
  const _Century();
  String of(UnitsLocalization l, bool p) => p ? l.atomCenturies : l.atomCentury;
}

class _SecondAngle implements _Valuer {
  const _SecondAngle();
  String of(UnitsLocalization l, bool p) =>
      p ? l.atomSecondsAngle : l.atomSecondAngle;
}

class _MinuteAngle implements _Valuer {
  const _MinuteAngle();
  String of(UnitsLocalization l, bool p) =>
      p ? l.atomMinutesAngle : l.atomMinuteAngle;
}

class _Degree implements _Valuer {
  const _Degree();
  String of(UnitsLocalization l, bool p) => p ? l.atomDegrees : l.atomDegree;
}

class _Ampere implements _Valuer {
  const _Ampere();
  String of(UnitsLocalization l, bool p) => p ? l.atomAmperes : l.atomAmpere;
}

class _Electronvolt implements _Valuer {
  const _Electronvolt();
  String of(UnitsLocalization l, bool p) =>
      p ? l.atomElectronvolts : l.atomElectronvolt;
}

class _Bel implements _Valuer {
  const _Bel();
  String of(UnitsLocalization l, bool p) => p ? l.atomBels : l.atomBel;
}

class _Kelvin implements _Valuer {
  const _Kelvin();
  String of(UnitsLocalization l, bool p) => p ? l.atomKelvins : l.atomKelvin;
}

class _Mole implements _Valuer {
  const _Mole();
  String of(UnitsLocalization l, bool p) => p ? l.atomMoles : l.atomMole;
}

class _Candela implements _Valuer {
  const _Candela();
  String of(UnitsLocalization l, bool p) => p ? l.atomCandelas : l.atomCandela;
}

class _Percent implements _Valuer {
  const _Percent();
  String of(UnitsLocalization l, bool p) => l.atomPercent;
}

class _PerThousand implements _Valuer {
  const _PerThousand();
  String of(UnitsLocalization l, bool p) => l.atomPerThousand;
}

class _Bit implements _Valuer {
  const _Bit();
  String of(UnitsLocalization l, bool p) => p ? l.atomBits : l.atomBit;
}

class _Byte implements _Valuer {
  const _Byte();
  String of(UnitsLocalization l, bool p) => p ? l.atomBytes : l.atomByte;
}

class _Character implements _Valuer {
  const _Character();
  String of(UnitsLocalization l, bool p) =>
      p ? l.atomCharacters : l.atomCharacter;
}

class _Word implements _Valuer {
  const _Word();
  String of(UnitsLocalization l, bool p) => p ? l.atomWords : l.atomWord;
}

class _Radian implements _Valuer {
  const _Radian();
  String of(UnitsLocalization l, bool p) => p ? l.atomRadians : l.atomRadian;
}

class _Steradian implements _Valuer {
  const _Steradian();
  String of(UnitsLocalization l, bool p) =>
      p ? l.atomSteradians : l.atomSteradian;
}

class _Hertz implements _Valuer {
  const _Hertz();
  String of(UnitsLocalization l, bool p) => l.atomHertz;
}

class _Newton implements _Valuer {
  const _Newton();
  String of(UnitsLocalization l, bool p) => p ? l.atomNewtons : l.atomNewton;
}

class _Pascal implements _Valuer {
  const _Pascal();
  String of(UnitsLocalization l, bool p) => p ? l.atomPascals : l.atomPascal;
}

class _Joule implements _Valuer {
  const _Joule();
  String of(UnitsLocalization l, bool p) => p ? l.atomJoules : l.atomJoule;
}

class _Watt implements _Valuer {
  const _Watt();
  String of(UnitsLocalization l, bool p) => p ? l.atomWatts : l.atomWatt;
}

class _Coulomb implements _Valuer {
  const _Coulomb();
  String of(UnitsLocalization l, bool p) => p ? l.atomCoulombs : l.atomCoulomb;
}

class _Volt implements _Valuer {
  const _Volt();
  String of(UnitsLocalization l, bool p) => p ? l.atomVolts : l.atomVolt;
}

class _Farad implements _Valuer {
  const _Farad();
  String of(UnitsLocalization l, bool p) => p ? l.atomFarads : l.atomFarad;
}

class _Ohm implements _Valuer {
  const _Ohm();
  String of(UnitsLocalization l, bool p) => p ? l.atomOhms : l.atomOhm;
}

class _Siemens implements _Valuer {
  const _Siemens();
  String of(UnitsLocalization l, bool p) => l.atomSiemens;
}

class _Weber implements _Valuer {
  const _Weber();
  String of(UnitsLocalization l, bool p) => p ? l.atomWebers : l.atomWeber;
}

class _Tesla implements _Valuer {
  const _Tesla();
  String of(UnitsLocalization l, bool p) => p ? l.atomTeslas : l.atomTesla;
}

class _Henry implements _Valuer {
  const _Henry();
  String of(UnitsLocalization l, bool p) => p ? l.atomHenries : l.atomHenry;
}

class _DegreeCelsius implements _Valuer {
  const _DegreeCelsius();
  String of(UnitsLocalization l, bool p) =>
      p ? l.atomDegreesCelsius : l.atomDegreeCelsius;
}

class _Lumen implements _Valuer {
  const _Lumen();
  String of(UnitsLocalization l, bool p) => p ? l.atomLumens : l.atomLumen;
}

class _Lux implements _Valuer {
  const _Lux();
  String of(UnitsLocalization l, bool p) => p ? l.atomLuxes : l.atomLux;
}

class _Becquerel implements _Valuer {
  const _Becquerel();
  String of(UnitsLocalization l, bool p) =>
      p ? l.atomBecquerels : l.atomBecquerel;
}

class _Gray implements _Valuer {
  const _Gray();
  String of(UnitsLocalization l, bool p) => p ? l.atomGrays : l.atomGray;
}

class _Sievert implements _Valuer {
  const _Sievert();
  String of(UnitsLocalization l, bool p) => p ? l.atomSieverts : l.atomSievert;
}

class _Katal implements _Valuer {
  const _Katal();
  String of(UnitsLocalization l, bool p) => p ? l.atomKatals : l.atomKatal;
}

class AtomV1 {
  static const noAtom = const AtomV1._('', const _NoAtom());

  static const meter = const AtomV1._(r'm', const _Meter());

  static const foot = const AtomV1._(r'ft', const _Foot());

  static const inch = const AtomV1._(r'in', const _Inch());

  static const yard = const AtomV1._(r'yd', const _Yard());

  static const mile = const AtomV1._(r'mi', const _Mile());

  static const nauticalMile = const AtomV1._(r'NM', const _NauticalMile());

  static const lightYear = const AtomV1._(r'LY', const _LightYear());

  static const hectare = const AtomV1._(r'ha', const _Hectare());

  static const are = const AtomV1._(r'a', const _Are());

  static const liter = const AtomV1._(r'L', const _Liter());

  static const gallon = const AtomV1._(r'gal', const _Gallon());

  static const barrel = const AtomV1._(r'bbl', const _Barrel());

  static const gram = const AtomV1._(r'g', const _Gram());

  static const ton = const AtomV1._(r't', const _Ton());

  static const pound = const AtomV1._(r'lbs', const _Pound());

  static const ounce = const AtomV1._(r'oz', const _Ounce());

  static const second = const AtomV1._(r's', const _Second());

  static const minute = const AtomV1._(r'min', const _Minute());

  static const hour = const AtomV1._(r'h', const _Hour());

  static const day = const AtomV1._(r'd', const _Day());

  static const week = const AtomV1._(r'week', const _Week());

  static const month = const AtomV1._(r'month', const _Month());

  static const year = const AtomV1._(r'yr', const _Year());

  static const century = const AtomV1._(r'century', const _Century());

  static const secondAngle = const AtomV1._("'" "'", const _SecondAngle());

  static const minuteAngle = const AtomV1._("'", const _MinuteAngle());

  static const degree = const AtomV1._(r'°', const _Degree());

  static const ampere = const AtomV1._(r'A', const _Ampere());

  static const electronvolt = const AtomV1._(r'eV', const _Electronvolt());

  static const bel = const AtomV1._(r'B', const _Bel());

  static const kelvin = const AtomV1._(r'K', const _Kelvin());

  static const mole = const AtomV1._(r'mol', const _Mole());

  static const candela = const AtomV1._(r'cd', const _Candela());

  static const percent = const AtomV1._(r'%', const _Percent());

  static const perThousand = const AtomV1._(r'‰', const _PerThousand());

  static const bit = const AtomV1._(r'b', const _Bit());

  static const byte = const AtomV1._(r'B', const _Byte());

  static const character = const AtomV1._(r'character', const _Character());

  static const word = const AtomV1._(r'word', const _Word());

  static const radian = const AtomV1._(r'rad', const _Radian());

  static const steradian = const AtomV1._(r'sr', const _Steradian());

  static const hertz = const AtomV1._(r'Hz', const _Hertz());

  static const newton = const AtomV1._(r'N', const _Newton());

  static const pascal = const AtomV1._(r'Pa', const _Pascal());

  static const joule = const AtomV1._(r'J', const _Joule());

  static const watt = const AtomV1._(r'W', const _Watt());

  static const coulomb = const AtomV1._(r'C', const _Coulomb());

  static const volt = const AtomV1._(r'V', const _Volt());

  static const farad = const AtomV1._(r'F', const _Farad());

  static const ohm = const AtomV1._(r'Ω', const _Ohm());

  static const siemens = const AtomV1._(r'S', const _Siemens());

  static const weber = const AtomV1._(r'Wb', const _Weber());

  static const tesla = const AtomV1._(r'T', const _Tesla());

  static const henry = const AtomV1._(r'H', const _Henry());

  static const degreeCelsius = const AtomV1._(r'°C', const _DegreeCelsius());

  static const lumen = const AtomV1._(r'lm', const _Lumen());

  static const lux = const AtomV1._(r'lx', const _Lux());

  static const becquerel = const AtomV1._(r'Bq', const _Becquerel());

  static const gray = const AtomV1._(r'Gy', const _Gray());

  static const sievert = const AtomV1._(r'Sv', const _Sievert());

  static const katal = const AtomV1._(r'kat', const _Katal());

  final String symbol;
  final _Valuer _v;
  const AtomV1._(this.symbol, this._v);
  String l10n(UnitsLocalization l10n, bool plural) =>
      l10n == null ? symbol : _v.of(l10n, plural) ?? symbol;
}
