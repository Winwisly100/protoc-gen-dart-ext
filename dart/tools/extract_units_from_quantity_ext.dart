import 'dart:collection';
import 'dart:io';
import 'dart:mirrors';
import 'package:args/args.dart';
import 'package:quantity/quantity_ext.dart';
import 'package:quantity/quantity_si.dart';

const output = 'output';
const lib = Symbol("quantity_ext");
final suffix = '${Units}';

main(List<String> args) {
  final parser = ArgParser()
    ..addOption(output, abbr: 'o', help: 'the required output file name');
  final argResults = parser.parse(args);
  final outfile = argResults[output];
  if (outfile == null) {
    print(parser.usage);
    exit(-1);
  }

  final enums = reflectUnits(lib);
  final contents = renderProtobuf(enums);

  File(outfile)
    ..deleteSync()
    ..writeAsStringSync(contents);
  print('Done.');
}

Map<String, List<String>> reflectUnits(Symbol libraryName) {
  final enums = SplayTreeMap<String, List<String>>();

  final mirrorSystem = currentMirrorSystem();
  final libMirror = mirrorSystem.findLibrary(libraryName);

  if (libMirror != null) {
    print("Found Library: ${libMirror}");
    libMirror.declarations.forEach((s, decl) {
      if (decl is VariableMirror &&
          !decl.isConst &&
          decl.isFinal &&
          !decl.isPrivate) {
        final typeMirror = decl.type;
        if (typeMirror.hasReflectedType) {
          final varType = typeMirror.reflectedType.toString();
          if (varType.endsWith(suffix)) {
            if (!enums.containsKey(varType)) enums[varType] = [];
            enums[varType].add(MirrorSystem.getName(s));
          }
        }
      }
    });
  }

  enums.values.forEach((list) => list.sort((a, b) => a.compareTo(b)));
  return enums;
}

String enumToPrefix(String e) =>
    '${e[0].toLowerCase()}${e.substring(1, e.length - suffix.length)}_';

final syntax =
    '''// Generated by `pub run tools/extract_units_from_quantity_ext.dart -o ${Platform.script.toFilePath()}`
// from package:quantity/quantity_ext.dart
syntax = "proto2";
package units;

option go_package = "github.com/empirefox/protoc-gen-dart-ext/pkg/units";
''';

Iterable<String> buildField(String e, List<String> names) =>
    names.map((n) => n.isEmpty ? '' : '${enumToPrefix(e)}$n').followedBy(['']);

String renderProtobuf(Map<String, List<String>> enums) {
  final contents = [syntax]
    ..addAll([
      '// see',
      '// https://pub.dartlang.org/documentation/quantity/latest/quantity_ext/quantity_ext-library.html',
      'enum Units {',
    ])
    ..addAll(enums
        .map((e, fields) => MapEntry(e, buildField(e, fields)))
        .values
        .expand((a) => a)
        .toList()
        .asMap()
        .map((i, n) => MapEntry(i, n.isEmpty ? '' : '  $n = ${i + 1};'))
        .values)
    ..removeLast()
    ..add('}\n');
  return contents.join('\n');
}
